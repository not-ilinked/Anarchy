<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Leaf.xNet</name>
    </assembly>
    <members>
        <member name="T:Leaf.xNet.NetException">
            <inheritdoc />
            <summary>
            Исключение, которое выбрасывается, в случае возникновения ошибки при работе с сетью.
            </summary>
        </member>
        <member name="M:Leaf.xNet.NetException.#ctor">
            <inheritdoc />
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Leaf.xNet.NetException" />.
            </summary>
        </member>
        <member name="M:Leaf.xNet.NetException.#ctor(System.String,System.Exception)">
            <inheritdoc />
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Leaf.xNet.NetException" /> заданным сообщением об ошибке.
            </summary>
            <param name="message">Сообщение об ошибке с объяснением причины исключения.</param>
            <param name="innerException">Исключение, вызвавшее текущие исключение, или значение <see langword="null" />.</param>
        </member>
        <member name="M:Leaf.xNet.NetException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Leaf.xNet.NetException" /> заданными экземплярами <see cref="T:System.Runtime.Serialization.SerializationInfo" /> и <see cref="T:System.Runtime.Serialization.StreamingContext" />.
            </summary>
            <param name="serializationInfo">Экземпляр класса <see cref="T:System.Runtime.Serialization.SerializationInfo" />, который содержит сведения, требуемые для сериализации нового экземпляра класса <see cref="T:Leaf.xNet.NetException" />.</param>
            <param name="streamingContext">Экземпляр класса <see cref="T:System.Runtime.Serialization.StreamingContext" />, содержащий источник сериализованного потока, связанного с новым экземпляром класса <see cref="T:Leaf.xNet.NetException" />.</param>
        </member>
        <member name="T:Leaf.xNet.Randomizer">
            <summary>
            Класс-обёртка- для потокобезопасной генерации псевдослучайных чисел.
            Lazy-load singleton для ThreadStatic <see cref="T:System.Random"/>.
            </summary>
        </member>
        <member name="T:Leaf.xNet.RequestParams">
            <inheritdoc />
            <summary>
            Представляет коллекцию строк, представляющих параметры запроса.
            </summary>
        </member>
        <member name="P:Leaf.xNet.RequestParams.Query">
            <summary>
            Запрос перечислением параметров и их значений.
            </summary>
        </member>
        <member name="F:Leaf.xNet.RequestParams.ValuesUnescaped">
            <summary>
            Указывает, нужно ли пропустить кодирование значений параметров запроса.
            </summary>
        </member>
        <member name="F:Leaf.xNet.RequestParams.KeysUnescaped">
            <summary>
            Указывает, нужно ли пропустить кодирование имен параметров запроса.
            </summary>
        </member>
        <member name="M:Leaf.xNet.RequestParams.#ctor(System.Boolean,System.Boolean)">
            <inheritdoc />
            <param name="valuesUnescaped">Указывает, нужно ли пропустить кодирование значений параметров запроса.</param>
            <param name="keysUnescaped">Указывает, нужно ли пропустить кодирование имен параметров запроса.</param>
        </member>
        <member name="P:Leaf.xNet.RequestParams.Item(System.String)">
            <summary>
            Задаёт новый параметр запроса.
            </summary>
            <param name="paramName">Название параметра запроса.</param>
            <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="paramName"/> равно <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="paramName"/> является пустой строкой.</exception>
        </member>
        <member name="T:Leaf.xNet.Resources">
            <summary>
              Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.ResourceManager">
            <summary>
              Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.Culture">
            <summary>
              Перезаписывает свойство CurrentUICulture текущего потока для всех
              обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.ArgumentException_CanNotReadOrSeek">
            <summary>
              Ищет локализованную строку, похожую на Thread can not read or seek.
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.ArgumentException_EmptyString">
            <summary>
              Ищет локализованную строку, похожую на Value has not been empty string.
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.ArgumentException_HttpRequest_SetNotAvailableHeader">
            <summary>
              Ищет локализованную строку, похожую на Value of &apos;{0}&apos; set not available header.
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.ArgumentException_MultiThreading_BegIndexRangeMoreEndIndex">
            <summary>
              Ищет локализованную строку, похожую на Begin Index range more end index.
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.ArgumentException_OnlyAbsoluteUri">
            <summary>
              Ищет локализованную строку, похожую на Acceptable use only the absolute URI..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.ArgumentException_WrongPath">
            <summary>
              Ищет локализованную строку, похожую на The path is an empty string, contains only white space, or contains invalid characters..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.ArgumentOutOfRangeException_CanNotBeGreater">
            <summary>
              Ищет локализованную строку, похожую на The value can not be more than {0}..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.ArgumentOutOfRangeException_CanNotBeLess">
            <summary>
              Ищет локализованную строку, похожую на The value can not be less {0}..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.ArgumentOutOfRangeException_CanNotBeLessOrGreater">
            <summary>
              Ищет локализованную строку, похожую на The value can not be less than {0} or {1} longer..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.ArgumentOutOfRangeException_StringHelper_MoreLengthString">
            <summary>
              Ищет локализованную строку, похожую на The starting position can not be more than the length of the string..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.ArgumentOutOfRangeException_StringLengthCanNotBeMore">
            <summary>
              Ищет локализованную строку, похожую на String length must not be more than {0} characters..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.CookieStorage_SaveToFile_FileAlreadyExists">
            <summary>
              Ищет локализованную строку, похожую на Файл с куками &apos;${0}&apos; уже существует.
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.DirectoryNotFoundException_DirectoryNotFound">
            <summary>
              Ищет локализованную строку, похожую на he path points to a nonexistent directory {0}..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.FormatException_ProxyClient_WrongPort">
            <summary>
              Ищет локализованную строку, похожую на Invalid port specified..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.HttpException_ClientError">
            <summary>
              Ищет локализованную строку, похожую на The error on the client side. Status code: {0}.
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.HttpException_ConnectTimeout">
            <summary>
              Ищет локализованную строку, похожую на It turned out wait for a connection to the HTTP-server &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.HttpException_Default">
            <summary>
              Ищет локализованную строку, похожую на An error when handling HTTP protocol..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.HttpException_FailedConnect">
            <summary>
              Ищет локализованную строку, похожую на Unable to connect to the HTTP-server &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.HttpException_FailedGetHostAddresses">
            <summary>
              Ищет локализованную строку, похожую на Failed to get the host IP-address &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.HttpException_FailedReceiveMessageBody">
            <summary>
              Ищет локализованную строку, похожую на Could not recieve the message body of the response HTTP-server &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.HttpException_FailedReceiveResponse">
            <summary>
              Ищет локализованную строку, похожую на Failed to recieve the response from the HTTP-server &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.HttpException_FailedSendRequest">
            <summary>
              Ищет локализованную строку, похожую на Failed to send HTTP-request to the server &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.HttpException_FailedSslConnect">
            <summary>
              Ищет локализованную строку, похожую на Unable to establish SSL-connection with HTTP-server &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.HttpException_LimitRedirections">
            <summary>
              Ищет локализованную строку, похожую на Have exceeded the maximum number of consecutive redirects..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.HttpException_ReceivedEmptyResponse">
            <summary>
              Ищет локализованную строку, похожую на Received empty response from the HTTP-server &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.HttpException_ReceivedWrongResponse">
            <summary>
              Ищет локализованную строку, похожую на Received an invalid response from the HTTP-server &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.HttpException_SeverError">
            <summary>
              Ищет локализованную строку, похожую на The error on the server side. Status code: {0}.
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.HttpException_WaitDataTimeout">
            <summary>
              Ищет локализованную строку, похожую на It turned out the wait time data from the HTTP-server &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.HttpException_WrongChunkedBlockLength">
            <summary>
              Ищет локализованную строку, похожую на Received invalid data block size when using Chunked: {0}.
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.HttpException_WrongCookie">
            <summary>
              Ищет локализованную строку, похожую на Received invalid cookies &apos;{0}&apos; from the HTTP-server &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.HttpException_WrongHeader">
            <summary>
              Ищет локализованную строку, похожую на Received invalid header &quot;{0} &apos;from the HTTP-server&apos; {1} &apos;..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.InvalidOperationException_HttpResponse_HasError">
            <summary>
              Ищет локализованную строку, похожую на Unable to perform the method, because an error occurred while receiving a response..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.InvalidOperationException_NotSupportedEncodingFormat">
            <summary>
              Ищет локализованную строку, похожую на Received an unsupported encoding format: {0}.
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.InvalidOperationException_ProxyClient_WrongHost">
            <summary>
              Ищет локализованную строку, похожую на The host may be uncertain or have zero length..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.InvalidOperationException_ProxyClient_WrongPassword">
            <summary>
              Ищет локализованную строку, похожую на The password can not be more than 255 characters..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.InvalidOperationException_ProxyClient_WrongPort">
            <summary>
              Ищет локализованную строку, похожую на The port can not be less than 1 or greater than 65535..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.InvalidOperationException_ProxyClient_WrongUsername">
            <summary>
              Ищет локализованную строку, похожую на User name can not be more than 255 characters..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.NetException_Default">
            <summary>
              Ищет локализованную строку, похожую на An error occurred while working with the network..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.ProxyException_CommandError">
            <summary>
              Ищет локализованную строку, похожую на {0} The proxy server &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.ProxyException_ConnectTimeout">
            <summary>
              Ищет локализованную строку, похожую на It turned out the wait time to connect to the proxy server &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.ProxyException_Default">
            <summary>
              Ищет локализованную строку, похожую на An error occurred while working with the proxy..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.ProxyException_Error">
            <summary>
              Ищет локализованную строку, похожую на An error occurred while working with the proxy server &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.ProxyException_FailedConnect">
            <summary>
              Ищет локализованную строку, похожую на Unable to connect to the proxy server &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.ProxyException_FailedGetHostAddresses">
            <summary>
              Ищет локализованную строку, похожую на Failed to get the host IP-address &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.ProxyException_NotSupportedAddressType">
            <summary>
              Ищет локализованную строку, похожую на The host &apos;{0}&apos; type &apos;{1}&apos; does not support the type Address. The following types: InterNetwork and InterNetworkV6. The proxy server &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.ProxyException_ReceivedEmptyResponse">
            <summary>
              Ищет локализованную строку, похожую на Received empty response from the proxy server &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.ProxyException_ReceivedWrongResponse">
            <summary>
              Ищет локализованную строку, похожую на Received an invalid response from the proxy server &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.ProxyException_ReceivedWrongStatusCode">
            <summary>
              Ищет локализованную строку, похожую на Received invalid status code &apos;{0}&apos; on &apos;{1}&apos; proxy..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.ProxyException_Socks5_FailedAuthOn">
            <summary>
              Ищет локализованную строку, похожую на Failed to authenticate with the proxy server &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.ProxyException_WaitDataTimeout">
            <summary>
              Ищет локализованную строку, похожую на It turned out the wait time data from the proxy server &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.Socks_UnknownError">
            <summary>
              Ищет локализованную строку, похожую на Unknown error..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.Socks4_CommandReplyRequestRejectedCannotConnectToIdentd">
            <summary>
              Ищет локализованную строку, похожую на The request failed, because things are not running identd (or not available from the server)..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.Socks4_CommandReplyRequestRejectedDifferentIdentd">
            <summary>
              Ищет локализованную строку, похожую на The request failed because client&apos;s identd could not confirm the user ID in the query..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.Socks4_CommandReplyRequestRejectedOrFailed">
            <summary>
              Ищет локализованную строку, похожую на Query rejected or erroneous..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.Socks5_AuthMethodReplyNoAcceptableMethods">
            <summary>
              Ищет локализованную строку, похожую на The proposed authentication methods are supported..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.Socks5_CommandReplyAddressTypeNotSupported">
            <summary>
              Ищет локализованную строку, похожую на Address type not supported..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.Socks5_CommandReplyCommandNotSupported">
            <summary>
              Ищет локализованную строку, похожую на The command is not supported or protocol error..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.Socks5_CommandReplyConnectionNotAllowedByRuleset">
            <summary>
              Ищет локализованную строку, похожую на Connecting a set of rules is prohibited..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.Socks5_CommandReplyConnectionRefused">
            <summary>
              Ищет локализованную строку, похожую на Connection refused..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.Socks5_CommandReplyGeneralSocksServerFailure">
            <summary>
              Ищет локализованную строку, похожую на Error SOCKS-server..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.Socks5_CommandReplyHostUnreachable">
            <summary>
              Ищет локализованную строку, похожую на Host unreachable..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.Socks5_CommandReplyNetworkUnreachable">
            <summary>
              Ищет локализованную строку, похожую на The network is not available..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.Socks5_CommandReplyTTLExpired">
            <summary>
              Ищет локализованную строку, похожую на Expired TTL..
            </summary>
        </member>
        <member name="P:Leaf.xNet.Resources.StringExtensions_Substrings_Invalid_Index">
            <summary>
              Ищет локализованную строку, похожую на Неверно задан начальный индекс поиска подстрок.
            </summary>
        </member>
        <member name="M:Leaf.xNet.Services.Captcha.BaseCaptchaSolver.SolveImage(System.String,System.Threading.CancellationToken)">
            <exception cref="T:System.NotImplementedException">Throws when method isn't implemented by your class.</exception>
        </member>
        <member name="M:Leaf.xNet.Services.Captcha.BaseCaptchaSolver.SolveImage(System.Byte[],System.Threading.CancellationToken)">
            <exception cref="T:System.NotImplementedException">Throws when method isn't implemented by your class.</exception>
        </member>
        <member name="M:Leaf.xNet.Services.Captcha.BaseCaptchaSolver.SolveImage(System.IO.Stream,System.Threading.CancellationToken)">
            <exception cref="T:System.NotImplementedException">Throws when method isn't implemented by your class.</exception>
        </member>
        <member name="M:Leaf.xNet.Services.Captcha.BaseCaptchaSolver.SolveImageFromBase64(System.String,System.Threading.CancellationToken)">
            <exception cref="T:System.NotImplementedException">Throws when method isn't implemented by your class.</exception>
        </member>
        <member name="M:Leaf.xNet.Services.Captcha.BaseCaptchaSolver.SolveRecaptcha(System.String,System.String,System.Threading.CancellationToken)">
            <exception cref="T:System.NotImplementedException">Throws when method isn't implemented by your class.</exception>
        </member>
        <member name="T:Leaf.xNet.Services.Captcha.CapmonsterSolver">
            <inheritdoc />
        </member>
        <member name="T:Leaf.xNet.Services.Captcha.RucaptchaSolver">
            <inheritdoc />
        </member>
        <member name="T:Leaf.xNet.Services.Captcha.TwoCaptchaSolver">
            <inheritdoc />
        </member>
        <member name="T:Leaf.xNet.Services.Cloudflare.ChallengeSolution">
            <inheritdoc cref="T:IEquatable" />
            <summary>
            Содержит информацию которая необходима для прохождения испытания CloudFlare.
            </summary>
        </member>
        <member name="P:Leaf.xNet.Services.Cloudflare.ChallengeSolution.ClearancePage">
            <summary>
            Адрес страницы где необходимо пройти испытание.
            </summary>
        </member>
        <member name="P:Leaf.xNet.Services.Cloudflare.ChallengeSolution.VerificationCode">
            <summary>
            Код верификации.
            </summary>
        </member>
        <member name="P:Leaf.xNet.Services.Cloudflare.ChallengeSolution.Pass">
            <summary>
            Вхождение.
            </summary>
        </member>
        <member name="P:Leaf.xNet.Services.Cloudflare.ChallengeSolution.Answer">
            <summary>
            Ответ на JS Challenge.
            </summary>
        </member>
        <member name="P:Leaf.xNet.Services.Cloudflare.ChallengeSolution.S">
            <summary>
            Новый модификатор JS Challenge.
            </summary>
        </member>
        <member name="P:Leaf.xNet.Services.Cloudflare.ChallengeSolution.ContainsIntegerTag">
            <summary>
            Вернет истину если испытание подсчитывается только типом <see cref="T:System.Int32"/>, а не <see cref="T:System.Double"/> с плавающей точкой.
            </summary>
        </member>
        <member name="P:Leaf.xNet.Services.Cloudflare.ChallengeSolution.ClearanceQuery">
            <summary>
            Результирующий URL запроса который необходимо исполнить для прохождения JS испытания.
            </summary>
        </member>
        <member name="M:Leaf.xNet.Services.Cloudflare.ChallengeSolution.#ctor(System.String,System.String,System.String,System.Double,System.String,System.Boolean)">
            <summary>
            Содержит информацию которая необходима для прохождения испытания CloudFlare.
            </summary>
        </member>
        <member name="M:Leaf.xNet.Services.Cloudflare.ChallengeSolution.op_Equality(Leaf.xNet.Services.Cloudflare.ChallengeSolution,Leaf.xNet.Services.Cloudflare.ChallengeSolution)">
            <summary>
            Выполняет сравнение "РАВНО" для <see cref="T:Leaf.xNet.Services.Cloudflare.ChallengeSolution"/>.
            </summary>
            <returns>Вернет истину если результаты равны</returns>
        </member>
        <member name="M:Leaf.xNet.Services.Cloudflare.ChallengeSolution.op_Inequality(Leaf.xNet.Services.Cloudflare.ChallengeSolution,Leaf.xNet.Services.Cloudflare.ChallengeSolution)">
            <summary>
            Выполняет сравнение "Не РАВНО" для <see cref="T:Leaf.xNet.Services.Cloudflare.ChallengeSolution"/>.
            </summary>
            <returns>Вернет истину если результаты не равны</returns>
        </member>
        <member name="M:Leaf.xNet.Services.Cloudflare.ChallengeSolution.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Leaf.xNet.Services.Cloudflare.ChallengeSolution.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Leaf.xNet.Services.Cloudflare.ChallengeSolution.Equals(Leaf.xNet.Services.Cloudflare.ChallengeSolution)">
            <inheritdoc />
        </member>
        <member name="T:Leaf.xNet.Services.Cloudflare.ChallengeSolver">
            <summary>
            Provides methods to solve the JavaScript challenge, which is part of CloudFlares clearance process.
            </summary>
        </member>
        <member name="M:Leaf.xNet.Services.Cloudflare.ChallengeSolver.Solve(System.String,System.String,System.Int32)">
            <summary>
            Solves the given JavaScript challenge.
            </summary>
            <param name="challengePageContent">The HTML content of the clearance page, which contains the challenge.</param>
            <param name="targetHost">The hostname of the protected website.</param>
            <param name="targetPort">The port of the protected website.</param>
            <returns>The solution.</returns>
        </member>
        <member name="T:Leaf.xNet.Services.Cloudflare.CloudflareBypass">
            <summary>
            CloudFlare Anti-DDoS bypass extension for HttpRequest.
            </summary>
            <remarks>
            Only the JavaScript challenge can be handled. CAPTCHA and IP address blocking cannot be bypassed.
            </remarks>
        </member>
        <member name="T:Leaf.xNet.Services.Cloudflare.CloudflareBypass.DLog">
            <summary>
            Delegate for Log message to UI.
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="F:Leaf.xNet.Services.Cloudflare.CloudflareBypass.CfClearanceCookie">
            <summary>
            Cookie key name used for identify CF clearance.
            </summary>
        </member>
        <member name="P:Leaf.xNet.Services.Cloudflare.CloudflareBypass.DefaultAcceptLanguage">
            <summary>
            Default Accept-Language header added to Cloudflare server request.
            </summary>
        </member>
        <member name="P:Leaf.xNet.Services.Cloudflare.CloudflareBypass.MaxRetries">
            <summary>
            Gets or sets the number of clearance retries, if clearance fails.
            </summary>
            <remarks>A negative value causes an infinite amount of retries.</remarks>
        </member>
        <member name="P:Leaf.xNet.Services.Cloudflare.CloudflareBypass.DelayMilliseconds">
            <summary>
            Delay before post form with solution in milliseconds.
            </summary>
            <remarks>Recommended value is 4000 ms. You can look extract value at challenge HTML. Second argument of setTimeout().</remarks>
        </member>
        <member name="M:Leaf.xNet.Services.Cloudflare.CloudflareBypass.IsCloudflared(Leaf.xNet.HttpResponse)">
            <summary>
            Check response for Cloudflare protection.
            </summary>
            <returns>Returns <keyword>true</keyword> if response has Cloudflare protection challenge.</returns>
        </member>
        <member name="M:Leaf.xNet.Services.Cloudflare.CloudflareBypass.GetThroughCloudflare(Leaf.xNet.HttpRequest,System.Uri,Leaf.xNet.Services.Cloudflare.CloudflareBypass.DLog,System.Threading.CancellationToken,Leaf.xNet.Services.Captcha.ICaptchaSolver)">
            <summary>
            GET request with bypassing Cloudflare JavaScript challenge.
            </summary>
            <param name="request">Http request</param>
            <param name="uri">Uri Address</param>
            <param name="log">Log action</param>
            <param name="cancellationToken">Cancel protection</param>
            <param name="captchaSolver">Captcha solving provider when Recaptcha required for pass</param>
            <exception cref="T:Leaf.xNet.HttpException">When HTTP request failed</exception>
            <exception cref="T:Leaf.xNet.Services.Cloudflare.CloudflareException">When unable to bypass Cloudflare</exception>
            <exception cref="T:Leaf.xNet.Services.Captcha.CaptchaException">When unable to solve captcha using <see cref="T:Leaf.xNet.Services.Captcha.ICaptchaSolver"/> provider.</exception>
            <returns>Returns original HttpResponse</returns>
        </member>
        <member name="M:Leaf.xNet.Services.Cloudflare.CloudflareBypass.GetThroughCloudflare(Leaf.xNet.HttpRequest,System.String,Leaf.xNet.Services.Cloudflare.CloudflareBypass.DLog,System.Threading.CancellationToken,Leaf.xNet.Services.Captcha.ICaptchaSolver)">
            <inheritdoc cref="M:Leaf.xNet.Services.Cloudflare.CloudflareBypass.GetThroughCloudflare(Leaf.xNet.HttpRequest,System.String,Leaf.xNet.Services.Cloudflare.CloudflareBypass.DLog,System.Threading.CancellationToken,Leaf.xNet.Services.Captcha.ICaptchaSolver)"/>
            <param name="url">URL address</param>
        </member>
        <member name="T:Leaf.xNet.Services.Cloudflare.CloudflareException">
            <inheritdoc />
            <summary>
            The exception that is thrown if Cloudflare clearance failed after the declared number of attempts.
            </summary>
        </member>
        <member name="M:Leaf.xNet.Services.Cloudflare.CloudflareException.#ctor(System.String)">
            <inheritdoc />
            <summary>
            Cloudflare solving exception.
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="P:Leaf.xNet.Services.Cloudflare.CloudflareException.Attempts">
            <summary>
            Returns the number of failed clearance attempts.
            </summary>
        </member>
        <member name="T:Leaf.xNet.SubstringException">
            <inheritdoc />
            <summary>
            Исключение говорящее о том что не удалось найти одну или несколько подстрок между двумя подстроками.
            </summary>
        </member>
        <member name="M:Leaf.xNet.SubstringException.#ctor">
            <inheritdoc />
            <summary>
            Исключение говорящее о том что не удалось найти одну или несколько подстрок между двумя подстроками.
            </summary>
        </member>
        <member name="M:Leaf.xNet.SubstringException.#ctor(System.String)">
            <inheritdoc />
            <inheritdoc cref="M:Leaf.xNet.SubstringException.#ctor"/>        
        </member>
        <member name="M:Leaf.xNet.SubstringException.#ctor(System.String,System.Exception)">
            <inheritdoc />
            <inheritdoc cref="M:Leaf.xNet.SubstringException.#ctor"/>
        </member>
        <member name="T:Leaf.xNet.StringExtensions">
            <summary>
            Этот класс является расширением для строк. Не нужно его вызывать напрямую.
            </summary>
        </member>
        <member name="M:Leaf.xNet.StringExtensions.SubstringsOrEmpty(System.String,System.String,System.String,System.Int32,System.StringComparison,System.Int32)">
            <summary>
            Вырезает несколько строк между двумя подстроками. Если совпадений нет, вернет пустой массив.
            </summary>
            <param name="self">Строка где следует искать подстроки</param>
            <param name="left">Начальная подстрока</param>
            <param name="right">Конечная подстрока</param>
            <param name="startIndex">Искать начиная с индекса</param>
            <param name="comparison">Метод сравнения строк</param>
            <param name="limit">Максимальное число подстрок для поиска</param>
            <exception cref="T:System.ArgumentNullException">Возникает если один из параметров пустая строка или <keyword>null</keyword>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Возникает если начальный индекс превышает длину строки.</exception>
            <returns>Возвращает массив подстрок которые попадают под шаблон или пустой массив если нет совпадений.</returns>
        </member>
        <member name="M:Leaf.xNet.StringExtensions.Substrings(System.String,System.String,System.String,System.Int32,System.StringComparison,System.Int32,System.String[])">
            <inheritdoc cref="M:Leaf.xNet.StringExtensions.SubstringsOrEmpty(System.String,System.String,System.String,System.Int32,System.StringComparison,System.Int32)"/>
            <summary>
            Вырезает несколько строк между двумя подстроками. Если совпадений нет, вернет <keyword>null</keyword>.
            <remarks>
            Создана для удобства, для написания исключений через ?? тернарный оператор.        
            </remarks>
            <example>
            str.Substrings("<tag>","</tag>") ?? throw new Exception("Не найдена строка");
            </example>
            
            <remarks>
            Не стоит забывать о функции <see cref="M:Leaf.xNet.StringExtensions.SubstringsEx(System.String,System.String,System.String,System.Int32,System.StringComparison,System.Int32)"/> - которая и так бросает исключение <see cref="T:Leaf.xNet.SubstringException"/> в случае если совпадения не будет.
            </remarks>
            </summary>
            <param name="fallback">Значение в случае если подстроки не найдены</param>
            <returns>Возвращает массив подстрок которые попадают под шаблон или <keyword>null</keyword>.</returns>
        </member>
        <member name="M:Leaf.xNet.StringExtensions.SubstringsEx(System.String,System.String,System.String,System.Int32,System.StringComparison,System.Int32)">
            <inheritdoc cref="M:Leaf.xNet.StringExtensions.SubstringsOrEmpty(System.String,System.String,System.String,System.Int32,System.StringComparison,System.Int32)"/>
            <summary>
            Вырезает несколько строк между двумя подстроками. Если совпадений нет, будет брошено исключение <see cref="T:Leaf.xNet.SubstringException"/>.
            </summary>
            <exception cref="T:Leaf.xNet.SubstringException">Будет брошено если совпадений не было найдено</exception>
            <returns>Возвращает массив подстрок которые попадают под шаблон или бросает исключение <see cref="T:Leaf.xNet.SubstringException"/> если совпадений не было найдено.</returns>
        </member>
        <member name="M:Leaf.xNet.StringExtensions.Substring(System.String,System.String,System.String,System.Int32,System.StringComparison,System.String)">
            <summary>
            Вырезает одну строку между двумя подстроками. Если совпадений нет, вернет <paramref name="fallback"/> или по-умолчанию <keyword>null</keyword>.
            <remarks>
            Создана для удобства, для написания исключений через ?? тернарный оператор.</remarks>
            <example>
            str.Between("<tag>","</tag>") ?? throw new Exception("Не найдена строка");
            </example>
            
            <remarks>
            Не стоит забывать о функции <see cref="M:Leaf.xNet.StringExtensions.SubstringEx(System.String,System.String,System.String,System.Int32,System.StringComparison)"/> - которая и так бросает исключение <see cref="T:Leaf.xNet.SubstringException"/> в случае если совпадения не будет.
            </remarks>
            </summary>
            <param name="self">Строка где следует искать подстроки</param>
            <param name="left">Начальная подстрока</param>
            <param name="right">Конечная подстрока</param>
            <param name="startIndex">Искать начиная с индекса</param>
            <param name="comparison">Метод сравнения строк</param>
            <param name="fallback">Значение в случае если подстрока не найдена</param>
            <returns>Возвращает строку между двумя подстроками или <paramref name="fallback"/> (по-умолчанию <keyword>null</keyword>).</returns>
        </member>
        <member name="M:Leaf.xNet.StringExtensions.SubstringOrEmpty(System.String,System.String,System.String,System.Int32,System.StringComparison)">
            <inheritdoc cref="M:Leaf.xNet.StringExtensions.Substring(System.String,System.String,System.String,System.Int32,System.StringComparison,System.String)"/>
            <summary>
            Вырезает одну строку между двумя подстроками. Если совпадений нет, вернет пустую строку.
            </summary>
            <returns>Возвращает строку между двумя подстроками. Если совпадений нет, вернет пустую строку.</returns>
        </member>
        <member name="M:Leaf.xNet.StringExtensions.SubstringEx(System.String,System.String,System.String,System.Int32,System.StringComparison)">
            <inheritdoc cref="M:Leaf.xNet.StringExtensions.Substring(System.String,System.String,System.String,System.Int32,System.StringComparison,System.String)"/>
            <summary>
            Вырезает одну строку между двумя подстроками. Если совпадений нет, будет брошено исключение <see cref="T:Leaf.xNet.SubstringException"/>.
            </summary>
            <exception cref="T:Leaf.xNet.SubstringException">Будет брошено если совпадений не было найдено</exception>
            <returns>Возвращает строку между двумя подстроками или бросает исключение <see cref="T:Leaf.xNet.SubstringException"/> если совпадений не было найдено.</returns>
        </member>
        <member name="M:Leaf.xNet.StringExtensions.SubstringLast(System.String,System.String,System.String,System.Int32,System.StringComparison,System.String)">
            <inheritdoc cref="M:Leaf.xNet.StringExtensions.Substring(System.String,System.String,System.String,System.Int32,System.StringComparison,System.String)"/>
            <summary>
            Вырезает одну строку между двумя подстроками, только начиная поиск с конца. Если совпадений нет, вернет <paramref name="notFoundValue"/> или по-умолчанию <keyword>null</keyword>.
            <remarks>
            Создана для удобства, для написания исключений через ?? тернарный оператор.</remarks>
            <example>
            str.BetweenLast("<tag>","</tag>") ?? throw new Exception("Не найдена строка");
            </example>
            
            <remarks>
            Не стоит забывать о функции <see cref="M:Leaf.xNet.StringExtensions.SubstringLastEx(System.String,System.String,System.String,System.Int32,System.StringComparison)"/> - которая и так бросает исключение <see cref="T:Leaf.xNet.SubstringException"/> в случае если совпадения не будет.
            </remarks>
            </summary>
        </member>
        <member name="M:Leaf.xNet.StringExtensions.SubstringLastOrEmpty(System.String,System.String,System.String,System.Int32,System.StringComparison)">
            <inheritdoc cref="M:Leaf.xNet.StringExtensions.SubstringOrEmpty(System.String,System.String,System.String,System.Int32,System.StringComparison)"/>
            <summary>
            Вырезает одну строку между двумя подстроками, только начиная поиск с конца. Если совпадений нет, вернет пустую строку.
            </summary>
        </member>
        <member name="M:Leaf.xNet.StringExtensions.SubstringLastEx(System.String,System.String,System.String,System.Int32,System.StringComparison)">
            <inheritdoc cref="M:Leaf.xNet.StringExtensions.SubstringEx(System.String,System.String,System.String,System.Int32,System.StringComparison)"/>
            <summary>
            Вырезает одну строку между двумя подстроками, только начиная поиск с конца. Если совпадений нет, будет брошено исключение <see cref="T:Leaf.xNet.SubstringException"/>.
            </summary>
        </member>
        <member name="M:Leaf.xNet.StringExtensions.ContainsInsensitive(System.String,System.String)">
            <summary>
            Проверяет наличие подстроки в строке, без учета реестра, через сравнение: <see cref="F:System.StringComparison.OrdinalIgnoreCase" />.
            </summary>
            <param name="self">Строка</param>
            <param name="value">Подстрока которую следует искать в исходной строке</param>
            <returns>Вернет <langword>true</langword> </returns>
        </member>
        <member name="P:Leaf.xNet.AdvancedWebClient.Timeout">
            <summary>
            Request timeout in milliseconds. By default: 10 seconds (10 000 ms).
            </summary>
        </member>
        <member name="P:Leaf.xNet.AdvancedWebClient.ReadWriteTimeout">
            <summary>
            Request read-write timeout in milliseconds. By default: 10 seconds (10 000 ms).
            </summary>
        </member>
        <member name="P:Leaf.xNet.AdvancedWebClient.DecompressionMethods">
            <summary>
            Decompression methods. By default: GZip and Deflate.
            </summary>
        </member>
        <member name="P:Leaf.xNet.AdvancedWebClient.ServerCertificateValidation">
            <summary>
            Check SSL Certificate before request. By default: all certificates allowed (false).
            </summary>
        </member>
        <member name="M:Leaf.xNet.CookieFilters.Filter(System.String)">
            <summary>
            Фильтруем Cookie для дальнейшего использования в нативном хранилище.
            </summary>
            <param name="rawCookie">Запись Cookie как строка со всеми параметрами</param>
            <returns>Отфильтрованная Cookie в виде строки со всеми отфильтрованными параметрами</returns>
        </member>
        <member name="M:Leaf.xNet.CookieFilters.FilterDomain(System.String)">
            <summary>
            Фильтр неверных доменов перед помещением <see cref="T:System.Net.Cookie"/> в <see cref="T:Leaf.xNet.CookieStorage"/>.
            </summary>
            <param name="domain">Домен куки из заголовка domain</param>
            <returns>Вернет <see langword="null"/> если домен не является корректным для помещения в хранилище <see cref="T:Leaf.xNet.CookieStorage"/></returns>
        </member>
        <member name="M:Leaf.xNet.CookieFilters.TrimWhitespace(System.String)">
            <summary>Убираем любые пробелы в начале и конце</summary>
        </member>
        <member name="M:Leaf.xNet.CookieFilters.FilterPath(System.String)">
            <summary>Заменяем все значения path на "/"</summary>
        </member>
        <member name="M:Leaf.xNet.CookieFilters.FilterCommaEndingValue(System.String)">
            <summary>Заменяем значения кук завершающиеся запятой (escape)</summary>
        </member>
        <member name="M:Leaf.xNet.CookieFilters.FilterInvalidExpireYear(System.String)">
            <summary>
            Исправляет исключение при GMT 9999 года методом замены на 9998 год.
            </summary>
            <returns>Вернет исправленную куку с годом 9998 вместо 9999 при котором может возникнуть исключение.</returns>
        </member>
        <member name="P:Leaf.xNet.CookieStorage.Container">
            <summary>
            Оригинальный Cookie контейнер <see cref="T:System.Net.CookieContainer"/> из .NET Framework.
            </summary>
        </member>
        <member name="P:Leaf.xNet.CookieStorage.Count">
            <summary>
            Число <see cref="T:System.Net.Cookie"/> в <see cref="T:System.Net.CookieContainer"/> (для всех адресов).
            </summary>
        </member>
        <member name="P:Leaf.xNet.CookieStorage.IsLocked">
            <summary>
            Возвращает или задает значение, указывающие, закрыты ли куки для редактирования через ответы сервера.
            </summary>
            <value>Значение по умолчанию — <see langword="false"/>.</value>
        </member>
        <member name="P:Leaf.xNet.CookieStorage.DefaultExpireBeforeSet">
            <summary>
            Значение по умолчанию для всех экземпляров.
            Сбрасывать старую Cookie при вызове <see cref="M:Leaf.xNet.CookieStorage.Set(System.Net.Cookie)"/> если найдено совпадение по домену и имени Cookie.
            </summary>
        </member>
        <member name="P:Leaf.xNet.CookieStorage.ExpireBeforeSet">
            <summary>        
            Сбрасывать старую Cookie при вызове <see cref="M:Leaf.xNet.CookieStorage.Set(System.Net.Cookie)"/> если найдено совпадение по домену и имени Cookie.
            </summary>
        </member>
        <member name="P:Leaf.xNet.CookieStorage.EscapeValuesOnReceive">
            <summary>
            Возвращает или задаёт экранирование символов значения Cookie получаемого от сервера.
            </summary>
        </member>
        <member name="P:Leaf.xNet.CookieStorage.IgnoreInvalidCookie">
            <summary>
            Dont throw exception when received cookie name is invalid, just ignore.
            </summary>
        </member>
        <member name="P:Leaf.xNet.CookieStorage.IgnoreSetForExpiredCookies">
            <summary>
            Пропускать куки которые истекли в ответе. Если указать <see langword="true" /> (по умолчанию), истекшее значение Cookie не будет обновляться и удаляться. 
            </summary>
        </member>
        <member name="P:Leaf.xNet.CookieStorage.UnescapeValuesOnSend">
            <summary>
            Возвращает или задаёт возможность де-экранировать символы значения Cookie прежде чем отправлять запрос на сервер.
            <remarks>
            По умолчанию задан тому же значению что и <see cref="P:Leaf.xNet.CookieStorage.EscapeValuesOnReceive"/>.
            Иными словами, по умолчанию режим работы такой: получили - экранировали значение в хранилище, отправляем - де-экранируем значение и отправляем на сервер оригинальное.
            </remarks>
            </summary>
        </member>
        <member name="M:Leaf.xNet.CookieStorage.Add(System.Net.Cookie)">
            <summary>
            Добавляет Cookie в хранилище <see cref="T:System.Net.CookieContainer"/>.
            </summary>
            <param name="cookie">Кука</param>
        </member>
        <member name="M:Leaf.xNet.CookieStorage.Add(System.Net.CookieCollection)">
            <summary>
            Добавляет коллекцию Cookies в хранилище <see cref="T:System.Net.CookieContainer"/>.
            </summary>
            <param name="cookies">Коллекция Cookie</param>
        </member>
        <member name="M:Leaf.xNet.CookieStorage.Set(System.Net.Cookie)">
            <summary>
            Добавляет или обновляет существующую Cookie в хранилище <see cref="T:System.Net.CookieContainer"/>.
            </summary>
            <param name="cookie">Кука</param>
        </member>
        <member name="M:Leaf.xNet.CookieStorage.Set(System.Net.CookieCollection)">
            <summary>
            Добавляет или обновляет существующие Cookies из коллекции в хранилище <see cref="T:System.Net.CookieContainer"/>.
            </summary>
            <param name="cookies">Коллекция Cookie</param>
        </member>
        <member name="M:Leaf.xNet.CookieStorage.Set(System.String,System.String,System.String,System.String)">
            <inheritdoc cref="M:Leaf.xNet.CookieStorage.Set(System.Net.CookieCollection)"/>
            <param name="name">Имя куки</param>
            <param name="value">Значение куки</param>
            <param name="domain">Домен (без протокола)</param>
            <param name="path">Путь</param>
        </member>
        <member name="M:Leaf.xNet.CookieStorage.Set(System.Uri,System.String)">
            <inheritdoc cref="M:Leaf.xNet.CookieStorage.Set(System.Net.CookieCollection)"/>
            <param name="requestAddress">Адрес запроса</param>
            <param name="rawCookie">Сырой формат записи в виде строки</param>
        </member>
        <member name="M:Leaf.xNet.CookieStorage.Set(System.String,System.String)">
            <inheritdoc cref="M:Leaf.xNet.CookieStorage.Set(System.Net.CookieCollection)"/>
            <param name="requestAddress">Адрес запроса</param>
            <param name="rawCookie">Сырой формат записи в виде строки</param>
        </member>
        <member name="M:Leaf.xNet.CookieStorage.Clear">
            <summary>
            Очистить <see cref="T:System.Net.CookieContainer"/>.
            </summary>
        </member>
        <member name="M:Leaf.xNet.CookieStorage.Remove(System.String)">
            <summary>
            Удалить все <see cref="T:System.Net.Cookie"/> связанные с URL адресом.
            </summary>
            <param name="url">URL адрес ресурса</param>
        </member>
        <member name="M:Leaf.xNet.CookieStorage.Remove(System.Uri)">
            <inheritdoc cref="M:Leaf.xNet.CookieStorage.Remove(System.String)"/>
            <param name="uri">URI адрес ресурса</param>
        </member>
        <member name="M:Leaf.xNet.CookieStorage.Remove(System.String,System.String)">
            <summary>
            Удалить <see cref="T:System.Net.Cookie"/> по имени для определенного URL.
            </summary>
            <param name="url">URL ресурса</param>
            <param name="name">Имя куки которую нужно удалить</param>
        </member>
        <member name="M:Leaf.xNet.CookieStorage.Remove(System.Uri,System.String)">
            <inheritdoc cref="M:Leaf.xNet.CookieStorage.Remove(System.String,System.String)"/>
            <param name="uri">URL ресурса</param>
            <param name="name">Имя куки которую нужно удалить</param>
        </member>
        <member name="M:Leaf.xNet.CookieStorage.GetCookieHeader(System.Uri)">
            <summary>
            Получает Cookies в формате строки-заголовка для HTTP запроса (<see cref="T:System.Net.HttpRequestHeader"/>).
            </summary>
            <param name="uri">URI адрес ресурса</param>
            <returns>Вернет строку содержащую все куки для адреса.</returns>
        </member>
        <member name="M:Leaf.xNet.CookieStorage.GetCookieHeader(System.String)">
            <inheritdoc cref="M:Leaf.xNet.CookieStorage.GetCookieHeader(System.Uri)"/>
            <param name="url">URL адрес ресурса</param>
        </member>
        <member name="M:Leaf.xNet.CookieStorage.GetCookies(System.Uri)">
            <summary>
            Получает коллекцию всех <see cref="T:System.Net.Cookie"/> связанных с адресом ресурса.
            </summary>
            <param name="uri">URI адрес ресурса</param>
            <returns>Вернет коллекцию <see cref="T:System.Net.Cookie"/> связанных с адресом ресурса</returns>
        </member>
        <member name="M:Leaf.xNet.CookieStorage.GetCookies(System.String)">
            <inheritdoc cref="M:Leaf.xNet.CookieStorage.GetCookies(System.Uri)"/>
            <param name="url">URL адрес ресурса</param>
        </member>
        <member name="M:Leaf.xNet.CookieStorage.Contains(System.Uri,System.String)">
            <summary>
            Проверяет существование <see cref="T:System.Net.Cookie"/> в <see cref="T:System.Net.CookieContainer"/> по адресу ресурса и имени ключа куки.
            </summary>
            <param name="uri">URI адрес ресурса</param>
            <param name="cookieName">Имя-ключ куки</param>
            <returns>Вернет <see langword="true"/> если ключ найден по запросу.</returns>
        </member>
        <member name="M:Leaf.xNet.CookieStorage.Contains(System.String,System.String)">
            <inheritdoc cref="M:Leaf.xNet.CookieStorage.Contains(System.Uri,System.String)"/>
        </member>
        <member name="M:Leaf.xNet.CookieStorage.SaveToFile(System.String,System.Boolean)">
            <summary>
            Сохраняет куки в файл.
            <remarks>Рекомендуется расширение .jar.</remarks>
            </summary>
            <param name="filePath">Пусть для сохранения файла</param>
            <param name="overwrite">Перезаписать файл если он уже существует</param>
        </member>
        <member name="M:Leaf.xNet.CookieStorage.LoadFromFile(System.String)">
            <summary>
            Загружает <see cref="T:Leaf.xNet.CookieStorage"/> из файла.
            </summary>
            <param name="filePath">Путь к файлу с куками</param>
            <returns>Вернет <see cref="T:Leaf.xNet.CookieStorage"/>, который задается в свойстве <see cref="T:Leaf.xNet.HttpRequest"/> Cookies.</returns>
        </member>
        <member name="M:Leaf.xNet.CookieStorage.ToBytes">
            <summary>
            Сохраняет куки в массив байт.
            </summary>
        </member>
        <member name="M:Leaf.xNet.CookieStorage.FromBytes(System.Byte[])">
            <summary>
            Загружает <see cref="T:Leaf.xNet.CookieStorage"/> из массива байт.
            </summary>
            <param name="bytes">Массив байт</param>
            <returns>Вернет <see cref="T:Leaf.xNet.CookieStorage"/>, который задается в свойстве <see cref="T:Leaf.xNet.HttpRequest"/> Cookies.</returns>
        </member>
        <member name="T:Leaf.xNet.Http">
            <summary>
            Представляет статический класс, предназначенный для помощи в работе с HTTP-протоколом.
            </summary>
        </member>
        <member name="F:Leaf.xNet.Http.NewLine">
            <summary>
            Обозначает новую строку в HTTP-протоколе.
            </summary>
        </member>
        <member name="F:Leaf.xNet.Http.AcceptAllCertificationsCallback">
            <summary>
            Метод делегата, который принимает все сертификаты SSL.
            </summary>
        </member>
        <member name="M:Leaf.xNet.Http.ToQueryString(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Boolean,System.Boolean)">
            <summary>
            Преобразует параметры в строку запроса.
            </summary>
            <param name="parameters">Параметры.</param>
            <param name="valuesUnescaped">Указывает, нужно ли пропустить кодирование значений параметров запроса.</param>
            <param name="keysUnescaped">Указывает, нужно ли пропустить кодирование имен параметров запроса.</param>
            <returns>Строка запроса.</returns>
            <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="parameters"/> равно <see langword="null"/>.</exception>
        </member>
        <member name="M:Leaf.xNet.Http.DetermineMediaType(System.String)">
            <summary>
            Определяет и возвращает MIME-тип на основе расширения файла.
            </summary>
            <param name="extension">Расширение файла.</param>
            <returns>MIME-тип.</returns>
        </member>
        <member name="M:Leaf.xNet.Http.IEUserAgent">
            <summary>
            Генерирует случайный User-Agent от браузера IE.
            </summary>
            <returns>Случайный User-Agent от браузера IE.</returns>
        </member>
        <member name="M:Leaf.xNet.Http.OperaUserAgent">
            <summary>
            Генерирует случайный User-Agent от браузера Opera.
            </summary>
            <returns>Случайный User-Agent от браузера Opera.</returns>
        </member>
        <member name="M:Leaf.xNet.Http.ChromeUserAgent">
            <summary>
            Генерирует случайный User-Agent от браузера Chrome.
            </summary>
            <returns>Случайный User-Agent от браузера Chrome.</returns>
        </member>
        <member name="M:Leaf.xNet.Http.FirefoxUserAgent">
            <summary>
            Генерирует случайный User-Agent от браузера Firefox.
            </summary>
            <returns>Случайный User-Agent от браузера Firefox.</returns>
        </member>
        <member name="M:Leaf.xNet.Http.OperaMiniUserAgent">
            <summary>
            Генерирует случайный User-Agent от мобильного браузера Opera.
            </summary>
            <returns>Случайный User-Agent от мобильного браузера Opera.</returns>
        </member>
        <member name="M:Leaf.xNet.Http.RandomUserAgent">
            <summary>
            Возвращает случайный User-Agent Chrome / Firefox / Opera основываясь на их популярности.
            </summary>
            <returns>Строка-значение заголовка User-Agent</returns>
        </member>
        <member name="T:Leaf.xNet.HttpException">
            <inheritdoc />
            <summary>
            Исключение, которое выбрасывается, в случае возникновения ошибки при работе с HTTP-протоколом.
            </summary>
        </member>
        <member name="P:Leaf.xNet.HttpException.Status">
            <summary>
            Возвращает состояние исключения.
            </summary>
        </member>
        <member name="P:Leaf.xNet.HttpException.HttpStatusCode">
            <summary>
            Возвращает код состояния ответа от HTTP-сервера.
            </summary>
        </member>
        <member name="M:Leaf.xNet.HttpException.#ctor">
            <inheritdoc />
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Leaf.xNet.HttpException" />.
            </summary>
        </member>
        <member name="M:Leaf.xNet.HttpException.#ctor(System.String,System.Exception)">
            <inheritdoc />
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Leaf.xNet.HttpException" /> заданным сообщением об ошибке.
            </summary>
            <param name="message">Сообщение об ошибке с объяснением причины исключения.</param>
            <param name="innerException">Исключение, вызвавшее текущие исключение, или значение <see langword="null" />.</param>
        </member>
        <member name="M:Leaf.xNet.HttpException.#ctor(System.String,Leaf.xNet.HttpExceptionStatus,Leaf.xNet.HttpStatusCode,System.Exception)">
            <inheritdoc />
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Leaf.xNet.HttpException" /> заданным сообщением об ошибке и кодом состояния ответа.
            </summary>
            <param name="message">Сообщение об ошибке с объяснением причины исключения.</param>
            <param name="status">Статус HTTP вызванного исключения</param>
            <param name="httpStatusCode">Код состояния ответа от HTTP-сервера.</param>
            <param name="innerException">Исключение, вызвавшее текущие исключение, или значение <see langword="null" />.</param>
        </member>
        <member name="M:Leaf.xNet.HttpException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Leaf.xNet.HttpException" /> заданными экземплярами <see cref="T:System.Runtime.Serialization.SerializationInfo" /> и <see cref="T:System.Runtime.Serialization.StreamingContext" />.
            </summary>
            <param name="serializationInfo">Экземпляр класса <see cref="T:System.Runtime.Serialization.SerializationInfo" />, который содержит сведения, требуемые для сериализации нового экземпляра класса <see cref="T:Leaf.xNet.HttpException" />.</param>
            <param name="streamingContext">Экземпляр класса <see cref="T:System.Runtime.Serialization.StreamingContext" />, содержащий источник сериализованного потока, связанного с новым экземпляром класса <see cref="T:Leaf.xNet.HttpException" />.</param>
        </member>
        <member name="M:Leaf.xNet.HttpException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
            <summary>
            Заполняет экземпляр <see cref="T:System.Runtime.Serialization.SerializationInfo" /> данными, необходимыми для сериализации исключения <see cref="T:Leaf.xNet.HttpException" />.
            </summary>
            <param name="serializationInfo">Данные о сериализации, <see cref="T:System.Runtime.Serialization.SerializationInfo" />, которые должны использоваться.</param>
            <param name="streamingContext">Данные о сериализации, <see cref="T:System.Runtime.Serialization.StreamingContext" />, которые должны использоваться.</param>
        </member>
        <member name="T:Leaf.xNet.HttpExceptionStatus">
            <summary>
            Определяет состояния для класса <see cref="T:Leaf.xNet.HttpException"/>.
            </summary>
        </member>
        <member name="F:Leaf.xNet.HttpExceptionStatus.Other">
            <summary>
            Произошла другая ошибка.
            </summary>
        </member>
        <member name="F:Leaf.xNet.HttpExceptionStatus.ProtocolError">
            <summary>
            Ответ, принятый от сервера, был завершен, но указал на ошибку на уровне протокола. Допустим, сервер вернул ошибку 404 или Not Found ("не найдено").
            </summary>
        </member>
        <member name="F:Leaf.xNet.HttpExceptionStatus.ConnectFailure">
            <summary>
            Не удалось соединиться с HTTP-сервером.
            </summary>
        </member>
        <member name="F:Leaf.xNet.HttpExceptionStatus.SendFailure">
            <summary>
            Не удалось отправить запрос HTTP-серверу.
            </summary>
        </member>
        <member name="F:Leaf.xNet.HttpExceptionStatus.ReceiveFailure">
            <summary>
            Не удалось загрузить ответ от HTTP-сервера.
            </summary>
        </member>
        <member name="T:Leaf.xNet.HttpHeader">
            <summary>
            HTTP-заголовки.
            </summary>
        </member>
        <member name="T:Leaf.xNet.HttpMethod">
            <summary>
            HTTP-метод запроса.
            </summary>
        </member>
        <member name="T:Leaf.xNet.HttpRequest">
            <inheritdoc />
            <summary>
            Class to send HTTP-server requests.
            </summary>
        </member>
        <member name="P:Leaf.xNet.HttpRequest.ProtocolVersion">
            <summary>
            Version HTTP-protocol, used in requests.
            </summary>
        </member>
        <member name="P:Leaf.xNet.HttpRequest.DisableProxyForLocalAddress">
            <summary>
            Возвращает или задаёт значение, указывающие, нужно ли отключать прокси-клиент для локальных адресов.
            </summary>
            <value>Значение по умолчанию — <see langword="false"/>.</value>
        </member>
        <member name="P:Leaf.xNet.HttpRequest.GlobalProxy">
            <summary>
            Возвращает или задаёт глобальный прокси-клиент.
            </summary>
            <value>Значение по умолчанию — <see langword="null"/>.</value>
        </member>
        <member name="E:Leaf.xNet.HttpRequest.UploadProgressChanged">
            <summary>
            Возникает каждый раз при продвижении хода выгрузки данных тела сообщения.
            </summary>
        </member>
        <member name="E:Leaf.xNet.HttpRequest.DownloadProgressChanged">
            <summary>
            Возникает каждый раз при продвижении хода загрузки данных тела сообщения.
            </summary>
        </member>
        <member name="P:Leaf.xNet.HttpRequest.BaseAddress">
            <summary>
            Возвращает или задаёт URI интернет-ресурса, который используется, если в запросе указан относительный адрес.
            </summary>
            <value>Значение по умолчанию — <see langword="null"/>.</value>
        </member>
        <member name="P:Leaf.xNet.HttpRequest.Address">
            <summary>
            Возвращает URI интернет-ресурса, который фактически отвечает на запрос.
            </summary>
        </member>
        <member name="P:Leaf.xNet.HttpRequest.Response">
            <summary>
            Возвращает последний ответ от HTTP-сервера, полученный данным экземпляром класса.
            </summary>
        </member>
        <member name="P:Leaf.xNet.HttpRequest.Proxy">
            <summary>
            Возвращает или задает прокси-клиент.
            </summary>
            <value>Значение по умолчанию — <see langword="null"/>.</value>
        </member>
        <member name="P:Leaf.xNet.HttpRequest.SslProtocols">
            <summary>
            Возвращает или задает возможные протоколы SSL.
            По умолчанию используется: <value>SslProtocols.Tls | SslProtocols.Tls12 | SslProtocols.Tls11</value>.
            </summary>
        </member>
        <member name="P:Leaf.xNet.HttpRequest.SslCertificateValidatorCallback">
            <summary>
            Возвращает или задает метод делегата, вызываемый при проверки сертификата SSL, используемый для проверки подлинности.
            </summary>
            <value>Значение по умолчанию — <see langword="null"/>. Если установлено значение по умолчанию, то используется метод, который принимает все сертификаты SSL.</value>
        </member>
        <member name="P:Leaf.xNet.HttpRequest.AllowEmptyHeaderValues">
            <summary>
            Разрешает устанавливать пустые значения заголовкам.
            </summary>
        </member>
        <member name="P:Leaf.xNet.HttpRequest.KeepTemporaryHeadersOnRedirect">
            <summary>
            Следует ли отправлять временные заголовки (добавленные через <see cref="M:Leaf.xNet.HttpRequest.AddHeader(System.String,System.String)"/>) переадресованным запросам.
            По умолчанию <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Leaf.xNet.HttpRequest.EnableMiddleHeaders">
            <summary>
            Включить отслеживание заголовков в промежуточных запросах (переадресованные) и сохранять их в <see cref="P:Leaf.xNet.HttpResponse.MiddleHeaders"/>.
            </summary>
        </member>
        <member name="P:Leaf.xNet.HttpRequest.AcceptEncoding">
            <summary>
            Заголовок AcceptEncoding. Стоит обратить внимание что не все сайты принимают версию с пробелом: "gzip, deflate".
            </summary>
        </member>
        <member name="P:Leaf.xNet.HttpRequest.IgnoreInvalidCookie">
            <summary>
            Dont throw exception when received cookie name is invalid, just ignore.
            </summary>
        </member>
        <member name="P:Leaf.xNet.HttpRequest.AllowAutoRedirect">
            <summary>
            Возвращает или задает значение, указывающие, должен ли запрос следовать ответам переадресации.
            </summary>
            <value>Значение по умолчанию — <see langword="true"/>.</value>
        </member>
        <member name="P:Leaf.xNet.HttpRequest.ManualMode">
            <summary>
            Переводит работу запросами в ручной режим. Указав значение false - вернет исходные значения полей AllowAutoRedirect и IgnoreProtocolErrors.
            1. Отключаются проверка возвращаемых HTTP кодов, исключения не будет если код отличен от 200 OK.
            2. Отключается автоматическая переадресация. 
            </summary>
        </member>
        <member name="P:Leaf.xNet.HttpRequest.MaximumAutomaticRedirections">
            <summary>
            Возвращает или задает максимальное количество последовательных переадресаций.
            </summary>
            <value>Значение по умолчанию - 5.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра меньше 1.</exception>
        </member>
        <member name="P:Leaf.xNet.HttpRequest.CookieSingleHeader">
            <summary>
            Возвращает или задаёт вариант генерации заголовков Cookie.
            Если указано значение <value>true</value> - будет сгенерирован лишь один Cookie заголовок, а в нем прописаны все Cookies через разделитель.
            Если указано значение <value>false</value> - каждая Cookie будет в новом заголовке (новый формат).
            </summary>
        </member>
        <member name="P:Leaf.xNet.HttpRequest.ConnectTimeout">
            <summary>
            Возвращает или задаёт время ожидания в миллисекундах при подключении к HTTP-серверу.
            </summary>
            <value>Значение по умолчанию - 9 000 мс, что равняется 9 секундам.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра меньше 0.</exception>
        </member>
        <member name="P:Leaf.xNet.HttpRequest.ReadWriteTimeout">
            <summary>
            Возвращает или задает время ожидания в миллисекундах при записи в поток или при чтении из него.
            </summary>
            <value>Значение по умолчанию - 30 000 мс, что равняется 30 секундам.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра меньше 0.</exception>
        </member>
        <member name="P:Leaf.xNet.HttpRequest.IgnoreProtocolErrors">
            <summary>
            Возвращает или задает значение, указывающие, нужно ли игнорировать ошибки протокола и не генерировать исключения.
            </summary>
            <value>Значение по умолчанию — <see langword="false"/>.</value>
            <remarks>Если установить значение <see langword="true"/>, то в случае получения ошибочного ответа с кодом состояния 4xx или 5xx, не будет сгенерировано исключение. Вы можете узнать код состояния ответа с помощью свойства <see cref="P:Leaf.xNet.HttpResponse.StatusCode"/>.</remarks>
        </member>
        <member name="P:Leaf.xNet.HttpRequest.KeepAlive">
            <summary>
            Возвращает или задает значение, указывающее, необходимо ли устанавливать постоянное подключение к интернет-ресурсу.
            </summary>
            <value>Значение по умолчанию - <see langword="true"/>.</value>
            <remarks>Если значение равно <see langword="true"/>, то дополнительно отправляется заголовок 'Connection: Keep-Alive', иначе отправляется заголовок 'Connection: Close'. Если для подключения используется HTTP-прокси, то вместо заголовка - 'Connection', устанавливается заголовок - 'Proxy-Connection'. В случае, если сервер оборвёт постоянное соединение, <see cref="T:Leaf.xNet.HttpResponse"/> попытается подключиться заново, но это работает только, если подключение идёт напрямую с HTTP-сервером, либо с HTTP-прокси.</remarks>
        </member>
        <member name="P:Leaf.xNet.HttpRequest.KeepAliveTimeout">
            <summary>
            Возвращает или задает время простаивания постоянного соединения в миллисекундах, которое используется по умолчанию.
            </summary>
            <value>Значение по умолчанию - 30.000, что равняется 30 секундам.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра меньше 0.</exception>
            <remarks>Если время вышло, то будет создано новое подключение. Если сервер вернёт своё значение таймаута <see cref="P:Leaf.xNet.HttpResponse.KeepAliveTimeout"/>, тогда будет использовано именно оно.</remarks>
        </member>
        <member name="P:Leaf.xNet.HttpRequest.MaximumKeepAliveRequests">
            <summary>
            Возвращает или задает максимально допустимое количество запросов для одного соединения, которое используется по умолчанию.
            </summary>
            <value>Значение по умолчанию - 100.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра меньше 1.</exception>
            <remarks>Если количество запросов превысило максимальное, то будет создано новое подключение. Если сервер вернёт своё значение максимального кол-ва запросов <see cref="P:Leaf.xNet.HttpResponse.MaximumKeepAliveRequests"/>, тогда будет использовано именно оно.</remarks>
        </member>
        <member name="P:Leaf.xNet.HttpRequest.Reconnect">
            <summary>
            Возвращает или задает значение, указывающее, нужно ли пробовать переподключаться через n-миллисекунд, если произошла ошибка во время подключения или отправки/загрузки данных.
            </summary>
            <value>Значение по умолчанию - <see langword="false"/>.</value>
        </member>
        <member name="P:Leaf.xNet.HttpRequest.ReconnectLimit">
            <summary>
            Возвращает или задает максимальное количество попыток переподключения.
            </summary>
            <value>Значение по умолчанию - 3.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра меньше 1.</exception>
        </member>
        <member name="P:Leaf.xNet.HttpRequest.ReconnectDelay">
            <summary>
            Возвращает или задает задержку в миллисекундах, которая возникает перед тем, как выполнить переподключение.
            </summary>
            <value>Значение по умолчанию - 100 миллисекунд.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра меньше 0.</exception>
        </member>
        <member name="P:Leaf.xNet.HttpRequest.Culture">
            <summary>
            Язык, используемый текущим запросом.
            </summary>
            <value>Значение по умолчанию — <see langword="null"/>.</value>
            <remarks>Если язык установлен, то дополнительно отправляется заголовок 'Accept-Language' с названием этого языка.</remarks>
        </member>
        <member name="P:Leaf.xNet.HttpRequest.CharacterSet">
            <summary>
            Возвращает или задаёт кодировку, применяемую для преобразования исходящих и входящих данных.
            </summary>
            <value>Значение по умолчанию — <see langword="null"/>.</value>
            <remarks>Если кодировка установлена, то дополнительно отправляется заголовок 'Accept-Charset' с названием этой кодировки, но только если этот заголовок уже не задан напрямую. Кодировка ответа определяется автоматически, но, если её не удастся определить, то будет использовано значение данного свойства. Если значение данного свойства не задано, то будет использовано значение <see cref="P:System.Text.Encoding.Default"/>.</remarks>
        </member>
        <member name="P:Leaf.xNet.HttpRequest.EnableEncodingContent">
            <summary>
            Возвращает или задает значение, указывающее, нужно ли кодировать содержимое ответа. Это используется, прежде всего, для сжатия данных.
            </summary>
            <value>Значение по умолчанию - <see langword="true"/>.</value>
            <remarks>Если значение равно <see langword="true"/>, то дополнительно отправляется заголовок 'Accept-Encoding: gzip, deflate'.</remarks>
        </member>
        <member name="P:Leaf.xNet.HttpRequest.Username">
            <summary>
            Возвращает или задаёт имя пользователя для базовой авторизации на HTTP-сервере.
            </summary>
            <value>Значение по умолчанию — <see langword="null"/>.</value>
            <remarks>Если значение установлено, то дополнительно отправляется заголовок 'Authorization'.</remarks>
        </member>
        <member name="P:Leaf.xNet.HttpRequest.Password">
            <summary>
            Возвращает или задаёт пароль для базовой авторизации на HTTP-сервере.
            </summary>
            <value>Значение по умолчанию — <see langword="null"/>.</value>
            <remarks>Если значение установлено, то дополнительно отправляется заголовок 'Authorization'.</remarks>
        </member>
        <member name="P:Leaf.xNet.HttpRequest.UserAgent">
            <summary>
            Возвращает или задает значение HTTP-заголовка 'User-Agent'.
            </summary>
            <value>Значение по умолчанию — <see langword="null"/>.</value>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.UserAgentRandomize">
            <summary>
            Изменяет User-Agent на случайный (Chrome, Firefox, Opera, Internet Explorer).
            Шансы выпадения соответствуют популярности браузеров.
            </summary>
        </member>
        <member name="P:Leaf.xNet.HttpRequest.Referer">
            <summary>
            Возвращает или задает значение HTTP-заголовка 'Referer'.
            </summary>
            <value>Значение по умолчанию — <see langword="null"/>.</value>
        </member>
        <member name="P:Leaf.xNet.HttpRequest.Authorization">
            <summary>
            Возвращает или задает значение HTTP-заголовка 'Authorization'.
            </summary>
            <value>Значение по умолчанию — <see langword="null"/>.</value>
        </member>
        <member name="P:Leaf.xNet.HttpRequest.Cookies">
            <summary>
            Возвращает или задает куки, связанные с запросом.
            Создается автоматически, если задано свойство <see cref="P:Leaf.xNet.HttpRequest.UseCookies"/> в значении <see langword="true"/>.
            </summary>
            <value>Значение по умолчанию: если <see cref="P:Leaf.xNet.HttpRequest.UseCookies"/> установлено в <see langword="true"/>, то вернется коллекция.
            Если <see langword="false"/>, то вернется <see langword="null"/>.</value>
            <remarks>Куки могут изменяться ответом от HTTP-сервера. Чтобы не допустить этого, нужно установить свойство <see cref="P:Leaf.xNet.CookieStorage.IsLocked"/> равным <see langword="true"/>.</remarks>
        </member>
        <member name="P:Leaf.xNet.HttpRequest.UseCookies">
            <summary>
            Позволяет задать автоматическое создание <see cref="T:Leaf.xNet.CookieStorage"/> в свойстве Cookies когда получены куки от сервера.
            Если установить значение в <see langword="false"/> - заголовки с куками не будут отправляться и не будут сохраняться из ответа (заголовок Set-Cookie).
            </summary>
            <value>Значение по умолчанию — <see langword="true"/>.</value>
        </member>
        <member name="P:Leaf.xNet.HttpRequest.CaptchaSolver">
            <summary>
            Сервис для решения каптч. Применяется для Cloudflare.
            </summary>
        </member>
        <member name="P:Leaf.xNet.HttpRequest.Item(System.String)">
            <summary>
            Возвращает или задаёт значение HTTP-заголовка.
            </summary>
            <param name="headerName">Название HTTP-заголовка.</param>
            <value>Значение HTTP-заголовка, если он задан, иначе пустая строка. Если задать значение <see langword="null"/> или пустую строку, то HTTP-заголовок будет удалён из списка.</value>
            <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="headerName"/> равно <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">
            Значение параметра <paramref name="headerName"/> является пустой строкой.
            -или-
            Установка значения HTTP-заголовка, который должен задаваться с помощью специального свойства/метода.
            </exception>
            <remarks>Список HTTP-заголовков, которые должны задаваться только с помощью специальных свойств/методов:
            <list type="table">
                <item>
                   <description>Accept-Encoding</description>
                </item>
                <item>
                   <description>Content-Length</description>
                </item>
                <item>
                    <description>Content-Type</description>
                </item>
                <item>
                   <description>Connection</description>
                </item>
                <item>
                   <description>Proxy-Connection</description>
                </item>
                <item>
                   <description>Host</description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="P:Leaf.xNet.HttpRequest.Item(Leaf.xNet.HttpHeader)">
            <summary>
            Возвращает или задаёт значение HTTP-заголовка.
            </summary>
            <param name="header">HTTP-заголовок.</param>
            <value>Значение HTTP-заголовка, если он задан, иначе пустая строка. Если задать значение <see langword="null"/> или пустую строку, то HTTP-заголовок будет удалён из списка.</value>
            <exception cref="T:System.ArgumentException">Установка значения HTTP-заголовка, который должен задаваться с помощью специального свойства/метода.</exception>
            <remarks>Список HTTP-заголовков, которые должны задаваться только с помощью специальных свойств/методов:
            <list type="table">
                <item>
                   <description>Accept-Encoding</description>
                </item>
                <item>
                   <description>Content-Length</description>
                </item>
                <item>
                    <description>Content-Type</description>
                </item>
                <item>
                   <description>Connection</description>
                </item>
                <item>
                   <description>Proxy-Connection</description>
                </item>
                <item>
                   <description>Host</description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.#ctor">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Leaf.xNet.HttpRequest"/>.
            </summary>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.#ctor(System.String)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Leaf.xNet.HttpRequest"/>.
            </summary>
            <param name="baseAddress">Адрес интернет-ресурса, который используется, если в запросе указан относительный адрес.</param>
            <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="baseAddress"/> равно <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">
            Значение параметра <paramref name="baseAddress"/> является пустой строкой.
            -или-
            Значение параметра <paramref name="baseAddress"/> не является абсолютным URI.
            </exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="baseAddress"/> не является абсолютным URI.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.#ctor(System.Uri)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Leaf.xNet.HttpRequest"/>.
            </summary>
            <param name="baseAddress">Адрес интернет-ресурса, который используется, если в запросе указан относительный адрес.</param>
            <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="baseAddress"/> равно <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="baseAddress"/> не является абсолютным URI.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Get(System.String,Leaf.xNet.RequestParams)">
            <summary>
            Отправляет GET-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="urlParams">Параметры URL-адреса, или значение <see langword="null"/>.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="address"/> равно <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="address"/> является пустой строкой.</exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Get(System.Uri,Leaf.xNet.RequestParams)">
            <summary>
            Отправляет GET-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="urlParams">Параметры URL-адреса, или значение <see langword="null"/>.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="address"/> равно <see langword="null"/>.</exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Head(System.String,Leaf.xNet.RequestParams)">
            <summary>
            Отправляет HEAD-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="urlParams">Параметры URL-адреса, или значение <see langword="null"/>.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="address"/> равно <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="address"/> является пустой строкой.</exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Head(System.Uri,Leaf.xNet.RequestParams)">
            <summary>
            Отправляет HEAD-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="urlParams">Параметры URL-адреса, или значение <see langword="null"/>.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="address"/> равно <see langword="null"/>.</exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Options(System.String,Leaf.xNet.RequestParams)">
            <summary>
            Отправляет OPTIONS-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="urlParams">Параметры URL-адреса, или значение <see langword="null"/>.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="address"/> равно <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="address"/> является пустой строкой.</exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Options(System.Uri,Leaf.xNet.RequestParams)">
            <summary>
            Отправляет OPTIONS-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="urlParams">Параметры URL-адреса, или значение <see langword="null"/>.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="address"/> равно <see langword="null"/>.</exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Post(System.String)">
            <summary>
            Отправляет POST-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="address"/> равно <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="address"/> является пустой строкой.</exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Post(System.Uri)">
            <summary>
            Отправляет POST-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="address"/> равно <see langword="null"/>.</exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Post(System.String,Leaf.xNet.RequestParams)">
            <summary>
            Отправляет POST-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="reqParams">Параметры запроса, отправляемые HTTP-серверу.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="address"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="reqParams"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="address"/> является пустой строкой.</exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Post(System.Uri,Leaf.xNet.RequestParams)">
            <summary>
            Отправляет POST-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="reqParams">Параметры запроса, отправляемые HTTP-серверу.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="address"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="reqParams"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Post(System.String,System.String,System.String)">
            <summary>
            Отправляет POST-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="str">Строка, отправляемая HTTP-серверу.</param>
            <param name="contentType">Тип отправляемых данных.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="address"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="str"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="contentType"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Значение параметра <paramref name="address"/> является пустой строкой.
            -или-
            Значение параметра <paramref name="str"/> является пустой строкой.
            -или
            Значение параметра <paramref name="contentType"/> является пустой строкой.
            </exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Post(System.Uri,System.String,System.String)">
            <summary>
            Отправляет POST-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="str">Строка, отправляемая HTTP-серверу.</param>
            <param name="contentType">Тип отправляемых данных.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="address"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="str"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="contentType"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Значение параметра <paramref name="str"/> является пустой строкой.
            -или-
            Значение параметра <paramref name="contentType"/> является пустой строкой.
            </exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Post(System.String,System.Byte[],System.String)">
            <summary>
            Отправляет POST-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="bytes">Массив байтов, отправляемый HTTP-серверу.</param>
            <param name="contentType">Тип отправляемых данных.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="address"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="bytes"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="contentType"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Значение параметра <paramref name="address"/> является пустой строкой.
            -или-
            Значение параметра <paramref name="contentType"/> является пустой строкой.
            </exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Post(System.Uri,System.Byte[],System.String)">
            <summary>
            Отправляет POST-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="bytes">Массив байтов, отправляемый HTTP-серверу.</param>
            <param name="contentType">Тип отправляемых данных.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="address"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="bytes"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="contentType"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="contentType"/> является пустой строкой.</exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Post(System.String,System.IO.Stream,System.String)">
            <summary>
            Отправляет POST-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="stream">Поток данных, отправляемый HTTP-серверу.</param>
            <param name="contentType">Тип отправляемых данных.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="address"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="stream"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="contentType"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Значение параметра <paramref name="address"/> является пустой строкой.
            -или-
            Значение параметра <paramref name="contentType"/> является пустой строкой.
            </exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Post(System.Uri,System.IO.Stream,System.String)">
            <summary>
            Отправляет POST-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="stream">Поток данных, отправляемый HTTP-серверу.</param>
            <param name="contentType">Тип отправляемых данных.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="address"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="stream"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="contentType"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="contentType"/> является пустой строкой.</exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Post(System.String,System.String)">
            <summary>
            Отправляет POST-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="path">Путь к файлу, данные которого будут отправлены HTTP-серверу.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="address"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="path"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Значение параметра <paramref name="address"/> является пустой строкой.
            -или-
            Значение параметра <paramref name="path"/> является пустой строкой.
            </exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Post(System.Uri,System.String)">
            <summary>
            Отправляет POST-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="path">Путь к файлу, данные которого будут отправлены HTTP-серверу.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="address"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="path"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="path"/> является пустой строкой.</exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Post(System.String,Leaf.xNet.HttpContent)">
            <summary>
            Отправляет POST-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="content">Контент, отправляемый HTTP-серверу.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="address"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="content"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="address"/> является пустой строкой.</exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Post(System.Uri,Leaf.xNet.HttpContent)">
            <summary>
            Отправляет POST-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="content">Контент, отправляемый HTTP-серверу.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="address"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="content"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Raw(Leaf.xNet.HttpMethod,System.String,Leaf.xNet.HttpContent)">
            <summary>
            Отправляет запрос HTTP-серверу.
            </summary>
            <param name="method">HTTP-метод запроса.</param>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="content">Контент, отправляемый HTTP-серверу, или значение <see langword="null"/>.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="address"/> равно <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="address"/> является пустой строкой.</exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Raw(Leaf.xNet.HttpMethod,System.Uri,Leaf.xNet.HttpContent)">
            <summary>
            Отправляет запрос HTTP-серверу.
            </summary>
            <param name="method">HTTP-метод запроса.</param>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="content">Контент, отправляемый HTTP-серверу, или значение <see langword="null"/>.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="address"/> равно <see langword="null"/>.</exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.AddHeader(System.String,System.String)">
            <summary>
            Добавляет временный HTTP-заголовок запроса. Такой заголовок перекрывает заголовок установленный через индексатор.
            </summary>
            <param name="name">Имя HTTP-заголовка.</param>
            <param name="value">Значение HTTP-заголовка.</param>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="name"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="value"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Значение параметра <paramref name="name"/> является пустой строкой.
            -или-
            Значение параметра <paramref name="value"/> является пустой строкой.
            -или-
            Установка значения HTTP-заголовка, который должен задаваться с помощью специального свойства/метода.
            </exception>
            <remarks>Данный HTTP-заголовок будет стёрт после первого запроса.</remarks>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.AddXmlHttpRequestHeader">
            <summary>
            Добавляет заголовок "X-Requested-With" со значением "XMLHttpRequest".
            Применяется к AJAX запросам.
            </summary>
            <returns>Вернет тот же HttpRequest для цепочки вызовов (pipeline).</returns>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.AddHeader(Leaf.xNet.HttpHeader,System.String)">
            <summary>
            Добавляет временный HTTP-заголовок запроса. Такой заголовок перекрывает заголовок установленный через индексатор.
            </summary>
            <param name="header">HTTP-заголовок.</param>
            <param name="value">Значение HTTP-заголовка.</param>
            <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="value"/> равно <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">
            Значение параметра <paramref name="value"/> является пустой строкой.
            -или-
            Установка значения HTTP-заголовка, который должен задаваться с помощью специального свойства/метода.
            </exception>
            <remarks>Данный HTTP-заголовок будет стёрт после первого запроса.</remarks>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Close">
            <summary>
            Закрывает соединение с HTTP-сервером.
            </summary>
            <remarks>Вызов данного метода равносилен вызову метода <see cref="M:Leaf.xNet.HttpRequest.Dispose"/>.</remarks>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Dispose">
            <inheritdoc />
            <summary>
            Освобождает все ресурсы, используемые текущим экземпляром класса <see cref="T:Leaf.xNet.HttpRequest" />.
            </summary>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.ContainsCookie(System.String,System.String)">
            <summary>
            Определяет, содержатся ли указанные куки.
            </summary>
            <param name="url">Адрес ресурса</param>
            <param name="name">Название куки.</param>
            <returns>Значение <see langword="true"/>, если указанные куки содержатся, иначе значение <see langword="false"/>.</returns>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.ContainsHeader(System.String)">
            <summary>
            Определяет, содержится ли указанный HTTP-заголовок.
            </summary>
            <param name="headerName">Название HTTP-заголовка.</param>
            <returns>Значение <see langword="true"/>, если указанный HTTP-заголовок содержится, иначе значение <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="headerName"/> равно <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="headerName"/> является пустой строкой.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.ContainsHeader(Leaf.xNet.HttpHeader)">
            <summary>
            Определяет, содержится ли указанный HTTP-заголовок.
            </summary>
            <param name="header">HTTP-заголовок.</param>
            <returns>Значение <see langword="true"/>, если указанный HTTP-заголовок содержится, иначе значение <see langword="false"/>.</returns>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.EnumerateHeaders">
            <summary>
            Возвращает перечисляемую коллекцию HTTP-заголовков.
            </summary>
            <returns>Коллекция HTTP-заголовков.</returns>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.ClearAllHeaders">
            <summary>
            Очищает все постоянные HTTP-заголовки.
            </summary>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Patch(System.String)">
            <summary>
            Отправляет PATCH-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="address"/> равно <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="address"/> является пустой строкой.</exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Patch(System.Uri)">
            <summary>
            Отправляет PATCH-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="address"/> равно <see langword="null"/>.</exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Patch(System.String,Leaf.xNet.RequestParams)">
            <summary>
            Отправляет PATCH-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="reqParams">Параметры запроса, отправляемые HTTP-серверу.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="address"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="reqParams"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="address"/> является пустой строкой.</exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Patch(System.Uri,Leaf.xNet.RequestParams)">
            <summary>
            Отправляет PATCH-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="reqParams">Параметры запроса, отправляемые HTTP-серверу.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="address"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="reqParams"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Patch(System.String,System.String,System.String)">
            <summary>
            Отправляет PATCH-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="str">Строка, отправляемая HTTP-серверу.</param>
            <param name="contentType">Тип отправляемых данных.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="address"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="str"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="contentType"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Значение параметра <paramref name="address"/> является пустой строкой.
            -или-
            Значение параметра <paramref name="str"/> является пустой строкой.
            -или
            Значение параметра <paramref name="contentType"/> является пустой строкой.
            </exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Patch(System.Uri,System.String,System.String)">
            <summary>
            Отправляет PATCH-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="str">Строка, отправляемая HTTP-серверу.</param>
            <param name="contentType">Тип отправляемых данных.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="address"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="str"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="contentType"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Значение параметра <paramref name="str"/> является пустой строкой.
            -или-
            Значение параметра <paramref name="contentType"/> является пустой строкой.
            </exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Patch(System.String,System.Byte[],System.String)">
            <summary>
            Отправляет PATCH-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="bytes">Массив байтов, отправляемый HTTP-серверу.</param>
            <param name="contentType">Тип отправляемых данных.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="address"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="bytes"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="contentType"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Значение параметра <paramref name="address"/> является пустой строкой.
            -или-
            Значение параметра <paramref name="contentType"/> является пустой строкой.
            </exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Patch(System.Uri,System.Byte[],System.String)">
            <summary>
            Отправляет PATCH-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="bytes">Массив байтов, отправляемый HTTP-серверу.</param>
            <param name="contentType">Тип отправляемых данных.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="address"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="bytes"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="contentType"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="contentType"/> является пустой строкой.</exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Patch(System.String,System.IO.Stream,System.String)">
            <summary>
            Отправляет PATCH-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="stream">Поток данных, отправляемый HTTP-серверу.</param>
            <param name="contentType">Тип отправляемых данных.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="address"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="stream"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="contentType"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Значение параметра <paramref name="address"/> является пустой строкой.
            -или-
            Значение параметра <paramref name="contentType"/> является пустой строкой.
            </exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Patch(System.Uri,System.IO.Stream,System.String)">
            <summary>
            Отправляет PATCH-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="stream">Поток данных, отправляемый HTTP-серверу.</param>
            <param name="contentType">Тип отправляемых данных.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="address"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="stream"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="contentType"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="contentType"/> является пустой строкой.</exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Patch(System.String,System.String)">
            <summary>
            Отправляет PATCH-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="path">Путь к файлу, данные которого будут отправлены HTTP-серверу.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="address"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="path"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Значение параметра <paramref name="address"/> является пустой строкой.
            -или-
            Значение параметра <paramref name="path"/> является пустой строкой.
            </exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Patch(System.Uri,System.String)">
            <summary>
            Отправляет PATCH-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="path">Путь к файлу, данные которого будут отправлены HTTP-серверу.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="address"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="path"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="path"/> является пустой строкой.</exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Patch(System.String,Leaf.xNet.HttpContent)">
            <summary>
            Отправляет PATCH-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="content">Контент, отправляемый HTTP-серверу.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="address"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="content"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="address"/> является пустой строкой.</exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Patch(System.Uri,Leaf.xNet.HttpContent)">
            <summary>
            Отправляет PATCH-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="content">Контент, отправляемый HTTP-серверу.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="address"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="content"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Put(System.String)">
            <summary>
            Отправляет PUT-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="address"/> равно <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="address"/> является пустой строкой.</exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Put(System.Uri)">
            <summary>
            Отправляет PUT-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="address"/> равно <see langword="null"/>.</exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Put(System.String,Leaf.xNet.RequestParams)">
            <summary>
            Отправляет PUT-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="reqParams">Параметры запроса, отправляемые HTTP-серверу.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="address"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="reqParams"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="address"/> является пустой строкой.</exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Put(System.Uri,Leaf.xNet.RequestParams)">
            <summary>
            Отправляет PUT-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="reqParams">Параметры запроса, отправляемые HTTP-серверу.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="address"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="reqParams"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Put(System.String,System.String,System.String)">
            <summary>
            Отправляет PUT-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="str">Строка, отправляемая HTTP-серверу.</param>
            <param name="contentType">Тип отправляемых данных.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="address"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="str"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="contentType"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Значение параметра <paramref name="address"/> является пустой строкой.
            -или-
            Значение параметра <paramref name="str"/> является пустой строкой.
            -или
            Значение параметра <paramref name="contentType"/> является пустой строкой.
            </exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Put(System.Uri,System.String,System.String)">
            <summary>
            Отправляет PUT-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="str">Строка, отправляемая HTTP-серверу.</param>
            <param name="contentType">Тип отправляемых данных.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="address"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="str"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="contentType"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Значение параметра <paramref name="str"/> является пустой строкой.
            -или-
            Значение параметра <paramref name="contentType"/> является пустой строкой.
            </exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Put(System.String,System.Byte[],System.String)">
            <summary>
            Отправляет PUT-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="bytes">Массив байтов, отправляемый HTTP-серверу.</param>
            <param name="contentType">Тип отправляемых данных.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="address"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="bytes"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="contentType"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Значение параметра <paramref name="address"/> является пустой строкой.
            -или-
            Значение параметра <paramref name="contentType"/> является пустой строкой.
            </exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Put(System.Uri,System.Byte[],System.String)">
            <summary>
            Отправляет PUT-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="bytes">Массив байтов, отправляемый HTTP-серверу.</param>
            <param name="contentType">Тип отправляемых данных.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="address"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="bytes"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="contentType"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="contentType"/> является пустой строкой.</exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Put(System.String,System.IO.Stream,System.String)">
            <summary>
            Отправляет PUT-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="stream">Поток данных, отправляемый HTTP-серверу.</param>
            <param name="contentType">Тип отправляемых данных.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="address"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="stream"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="contentType"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Значение параметра <paramref name="address"/> является пустой строкой.
            -или-
            Значение параметра <paramref name="contentType"/> является пустой строкой.
            </exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Put(System.Uri,System.IO.Stream,System.String)">
            <summary>
            Отправляет PUT-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="stream">Поток данных, отправляемый HTTP-серверу.</param>
            <param name="contentType">Тип отправляемых данных.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="address"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="stream"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="contentType"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="contentType"/> является пустой строкой.</exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Put(System.String,System.String)">
            <summary>
            Отправляет PUT-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="path">Путь к файлу, данные которого будут отправлены HTTP-серверу.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="address"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="path"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Значение параметра <paramref name="address"/> является пустой строкой.
            -или-
            Значение параметра <paramref name="path"/> является пустой строкой.
            </exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Put(System.Uri,System.String)">
            <summary>
            Отправляет PUT-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="path">Путь к файлу, данные которого будут отправлены HTTP-серверу.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="address"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="path"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="path"/> является пустой строкой.</exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Put(System.String,Leaf.xNet.HttpContent)">
            <summary>
            Отправляет PUT-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="content">Контент, отправляемый HTTP-серверу.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="address"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="content"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="address"/> является пустой строкой.</exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Put(System.Uri,Leaf.xNet.HttpContent)">
            <summary>
            Отправляет PUT-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="content">Контент, отправляемый HTTP-серверу.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="address"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="content"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Delete(System.String)">
            <summary>
            Отправляет DELETE-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="address"/> равно <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="address"/> является пустой строкой.</exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Delete(System.Uri)">
            <summary>
            Отправляет DELETE-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="address"/> равно <see langword="null"/>.</exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Delete(System.String,Leaf.xNet.RequestParams)">
            <summary>
            Отправляет DELETE-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="reqParams">Параметры запроса, отправляемые HTTP-серверу.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="address"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="reqParams"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="address"/> является пустой строкой.</exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Delete(System.Uri,Leaf.xNet.RequestParams)">
            <summary>
            Отправляет DELETE-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="reqParams">Параметры запроса, отправляемые HTTP-серверу.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="address"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="reqParams"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Delete(System.String,System.String,System.String)">
            <summary>
            Отправляет DELETE-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="str">Строка, отправляемая HTTP-серверу.</param>
            <param name="contentType">Тип отправляемых данных.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="address"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="str"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="contentType"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Значение параметра <paramref name="address"/> является пустой строкой.
            -или-
            Значение параметра <paramref name="str"/> является пустой строкой.
            -или
            Значение параметра <paramref name="contentType"/> является пустой строкой.
            </exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Delete(System.Uri,System.String,System.String)">
            <summary>
            Отправляет DELETE-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="str">Строка, отправляемая HTTP-серверу.</param>
            <param name="contentType">Тип отправляемых данных.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="address"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="str"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="contentType"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Значение параметра <paramref name="str"/> является пустой строкой.
            -или-
            Значение параметра <paramref name="contentType"/> является пустой строкой.
            </exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Delete(System.String,System.Byte[],System.String)">
            <summary>
            Отправляет DELETE-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="bytes">Массив байтов, отправляемый HTTP-серверу.</param>
            <param name="contentType">Тип отправляемых данных.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="address"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="bytes"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="contentType"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Значение параметра <paramref name="address"/> является пустой строкой.
            -или-
            Значение параметра <paramref name="contentType"/> является пустой строкой.
            </exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Delete(System.Uri,System.Byte[],System.String)">
            <summary>
            Отправляет DELETE-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="bytes">Массив байтов, отправляемый HTTP-серверу.</param>
            <param name="contentType">Тип отправляемых данных.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="address"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="bytes"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="contentType"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="contentType"/> является пустой строкой.</exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Delete(System.String,System.IO.Stream,System.String)">
            <summary>
            Отправляет DELETE-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="stream">Поток данных, отправляемый HTTP-серверу.</param>
            <param name="contentType">Тип отправляемых данных.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="address"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="stream"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="contentType"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Значение параметра <paramref name="address"/> является пустой строкой.
            -или-
            Значение параметра <paramref name="contentType"/> является пустой строкой.
            </exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Delete(System.Uri,System.IO.Stream,System.String)">
            <summary>
            Отправляет DELETE-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="stream">Поток данных, отправляемый HTTP-серверу.</param>
            <param name="contentType">Тип отправляемых данных.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="address"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="stream"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="contentType"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="contentType"/> является пустой строкой.</exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Delete(System.String,System.String)">
            <summary>
            Отправляет DELETE-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="path">Путь к файлу, данные которого будут отправлены HTTP-серверу.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="address"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="path"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Значение параметра <paramref name="address"/> является пустой строкой.
            -или-
            Значение параметра <paramref name="path"/> является пустой строкой.
            </exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Delete(System.Uri,System.String)">
            <summary>
            Отправляет DELETE-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="path">Путь к файлу, данные которого будут отправлены HTTP-серверу.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="address"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="path"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="path"/> является пустой строкой.</exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Delete(System.String,Leaf.xNet.HttpContent)">
            <summary>
            Отправляет DELETE-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="content">Контент, отправляемый HTTP-серверу.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="address"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="content"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="address"/> является пустой строкой.</exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Delete(System.Uri,Leaf.xNet.HttpContent)">
            <summary>
            Отправляет DELETE-запрос HTTP-серверу.
            </summary>
            <param name="address">Адрес интернет-ресурса.</param>
            <param name="content">Контент, отправляемый HTTP-серверу.</param>
            <returns>Объект, предназначенный для загрузки ответа от HTTP-сервера.</returns>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="address"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="content"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.Dispose(System.Boolean)">
            <summary>
            Освобождает неуправляемые (а при необходимости и управляемые) ресурсы, используемые объектом <see cref="T:Leaf.xNet.HttpRequest"/>.
            </summary>
            <param name="disposing">Значение <see langword="true"/> позволяет освободить управляемые и неуправляемые ресурсы; значение <see langword="false"/> позволяет освободить только неуправляемые ресурсы.</param>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.OnUploadProgressChanged(Leaf.xNet.UploadProgressChangedEventArgs)">
            <summary>
            Вызывает событие <see cref="E:Leaf.xNet.HttpRequest.UploadProgressChanged"/>.
            </summary>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="M:Leaf.xNet.HttpRequest.OnDownloadProgressChanged(Leaf.xNet.DownloadProgressChangedEventArgs)">
            <summary>
            Вызывает событие <see cref="E:Leaf.xNet.HttpRequest.DownloadProgressChanged"/>.
            </summary>
            <param name="e">Аргументы события.</param>
        </member>
        <member name="T:Leaf.xNet.HttpResponse">
            <summary>
            Представляет класс, предназначенный для загрузки ответа от HTTP-сервера.
            </summary>
        </member>
        <member name="P:Leaf.xNet.HttpResponse.HasError">
            <summary>
            Возвращает значение, указывающие, произошла ли ошибка во время получения ответа от HTTP-сервера.
            </summary>
        </member>
        <member name="P:Leaf.xNet.HttpResponse.MessageBodyLoaded">
            <summary>
            Возвращает значение, указывающие, загружено ли тело сообщения.
            </summary>
        </member>
        <member name="P:Leaf.xNet.HttpResponse.IsOK">
            <summary>
            Возвращает значение, указывающие, успешно ли выполнен запрос (код ответа = 200 OK). 
            </summary>
        </member>
        <member name="P:Leaf.xNet.HttpResponse.HasRedirect">
            <summary>
            Возвращает значение, указывающие, имеется ли переадресация.
            </summary>
        </member>
        <member name="P:Leaf.xNet.HttpResponse.HasExternalRedirect">
            <summary>
            Возвращает значение, указывающее, была ли переадресация на протокол отличный от HTTP или HTTPS.
            </summary>
        </member>
        <member name="P:Leaf.xNet.HttpResponse.ReconnectCount">
            <summary>
            Возвращает количество попыток переподключения.
            </summary>
        </member>
        <member name="P:Leaf.xNet.HttpResponse.Address">
            <summary>
            Возвращает URI интернет-ресурса, который фактически отвечал на запрос.
            </summary>
        </member>
        <member name="P:Leaf.xNet.HttpResponse.Method">
            <summary>
            Возвращает HTTP-метод, используемый для получения ответа.
            </summary>
        </member>
        <member name="P:Leaf.xNet.HttpResponse.ProtocolVersion">
            <summary>
            Возвращает версию HTTP-протокола, используемую в ответе.
            </summary>
        </member>
        <member name="P:Leaf.xNet.HttpResponse.StatusCode">
            <summary>
            Возвращает код состояния ответа.
            </summary>
        </member>
        <member name="P:Leaf.xNet.HttpResponse.RedirectAddress">
            <summary>
            Возвращает адрес переадресации.
            </summary>
            <returns>Адрес переадресации, иначе <see langword="null"/>.</returns>
        </member>
        <member name="P:Leaf.xNet.HttpResponse.CharacterSet">
            <summary>
            Возвращает кодировку тела сообщения.
            </summary>
            <value>Кодировка тела сообщения, если соответствующий заголовок задан, иначе значение заданное в <see cref="T:Leaf.xNet.HttpRequest"/>. Если и оно не задано, то значение <see cref="P:System.Text.Encoding.Default"/>.</value>
        </member>
        <member name="P:Leaf.xNet.HttpResponse.ContentLength">
            <summary>
            Возвращает длину тела сообщения.
            </summary>
            <value>Длина тела сообщения, если соответствующий заголовок задан, иначе -1.</value>
        </member>
        <member name="P:Leaf.xNet.HttpResponse.ContentType">
            <summary>
            Возвращает тип содержимого ответа.
            </summary>
            <value>Тип содержимого ответа, если соответствующий заголовок задан, иначе пустая строка.</value>
        </member>
        <member name="P:Leaf.xNet.HttpResponse.Location">
            <summary>
            Возвращает значение HTTP-заголовка 'Location'.
            </summary>
            <returns>Значение заголовка, если такой заголовок задан, иначе пустая строка.</returns>
        </member>
        <member name="P:Leaf.xNet.HttpResponse.Cookies">
            <summary>
            Возвращает куки, образовавшиеся в результате запроса, или установленные в <see cref="T:Leaf.xNet.HttpRequest"/>.
            </summary>
            <remarks>Если куки были установлены в <see cref="T:Leaf.xNet.HttpRequest"/> и значение свойства <see cref="P:Leaf.xNet.CookieStorage.IsLocked"/> равно <see langword="true"/>, то будут созданы новые куки.</remarks>
        </member>
        <member name="P:Leaf.xNet.HttpResponse.KeepAliveTimeout">
            <summary>
            Возвращает время простаивания постоянного соединения в миллисекундах.
            </summary>
            <value>Значение по умолчанию - <see langword="null"/>.</value>
        </member>
        <member name="P:Leaf.xNet.HttpResponse.MaximumKeepAliveRequests">
            <summary>
            Возвращает максимально допустимое количество запросов для одного соединения.
            </summary>
            <value>Значение по умолчанию - <see langword="null"/>.</value>
        </member>
        <member name="P:Leaf.xNet.HttpResponse.Item(System.String)">
            <summary>
            Возвращает значение HTTP-заголовка.
            </summary>
            <param name="headerName">Название HTTP-заголовка.</param>
            <value>Значение HTTP-заголовка, если он задан, иначе пустая строка.</value>
            <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="headerName"/> равно <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="headerName"/> является пустой строкой.</exception>
        </member>
        <member name="P:Leaf.xNet.HttpResponse.Item(Leaf.xNet.HttpHeader)">
            <summary>
            Возвращает значение HTTP-заголовка.
            </summary>
            <param name="header">HTTP-заголовок.</param>
            <value>Значение HTTP-заголовка, если он задан, иначе пустая строка.</value>
        </member>
        <member name="M:Leaf.xNet.HttpResponse.ToBytes">
            <summary>
            Загружает тело сообщения и возвращает его в виде массива байтов.
            </summary>
            <returns>Если тело сообщения отсутствует, или оно уже было загружено, то будет возвращён пустой массив байтов.</returns>
            <exception cref="T:System.InvalidOperationException">Вызов метода из ошибочного ответа.</exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpResponse.ToString">
            <summary>
            Загружает тело сообщения и возвращает его в виде строки.
            </summary>
            <returns>Если тело сообщения отсутствует, или оно уже было загружено, то будет возвращена пустая строка.</returns>
            <exception cref="T:System.InvalidOperationException">Вызов метода из ошибочного ответа.</exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpResponse.ToFile(System.String)">
            <summary>
            Загружает тело сообщения и сохраняет его в новый файл по указанному пути. Если файл уже существует, то он будет перезаписан.
            </summary>
            <param name="path">Путь к файлу, в котором будет сохранено тело сообщения.</param>
            <exception cref="T:System.InvalidOperationException">Вызов метода из ошибочного ответа.</exception>
            <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="path"/> равно <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="path"/> является пустой строкой, содержит только пробелы или содержит недопустимые символы.</exception>
            <exception cref="T:System.IO.PathTooLongException">Указанный путь, имя файла или и то и другое превышает наибольшую возможную длину, определенную системой. Например, для платформ на основе Windows длина пути не должна превышать 248 знаков, а имена файлов не должны содержать более 260 знаков.</exception>
            <exception cref="T:System.IO.FileNotFoundException">Значение параметра <paramref name="path"/> указывает на несуществующий файл.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">Значение параметра <paramref name="path"/> указывает на недопустимый путь.</exception>
            <exception cref="T:System.IO.IOException">При открытии файла возникла ошибка ввода-вывода.</exception>
            <exception cref="T:System.Security.SecurityException">Вызывающий оператор не имеет необходимого разрешения.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            Операция чтения файла не поддерживается на текущей платформе.
            -или-
            Значение параметра <paramref name="path"/> определяет каталог.
            -или-
            Вызывающий оператор не имеет необходимого разрешения.
            </exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpResponse.ToMemoryStream">
            <summary>
            Загружает тело сообщения и возвращает его в виде потока байтов из памяти.
            </summary>
            <returns>Если тело сообщения отсутствует, или оно уже было загружено, то будет возвращено значение <see langword="null"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Вызов метода из ошибочного ответа.</exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpResponse.None">
            <summary>
            Пропускает тело сообщения. Данный метод следует вызвать, если не требуется тело сообщения.
            </summary>
            <exception cref="T:System.InvalidOperationException">Вызов метода из ошибочного ответа.</exception>
            <exception cref="T:Leaf.xNet.HttpException">Ошибка при работе с HTTP-протоколом.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpResponse.ContainsCookie(System.String,System.String)">
            <summary>
            Определяет, содержатся ли указанные куки по указанному веб-адресу.
            </summary>
            <param name="url">Адрес ресурса.</param>
            <param name="name">Название куки.</param>
            <returns>Значение <see langword="true"/>, если указанные куки содержатся, иначе значение <see langword="false"/>.</returns>
        </member>
        <member name="M:Leaf.xNet.HttpResponse.ContainsCookie(System.Uri,System.String)">
            <inheritdoc cref="M:Leaf.xNet.HttpResponse.ContainsCookie(System.String,System.String)"/>
            <param name="uri">Адрес для куки</param>
        </member>
        <member name="M:Leaf.xNet.HttpResponse.ContainsCookie(System.String)">
            <inheritdoc cref="M:Leaf.xNet.HttpResponse.ContainsCookie(System.String,System.String)"/>
            <summary>
            Определяет, содержатся ли указанные куки по адресу из ответа.
            </summary>
        </member>
        <member name="M:Leaf.xNet.HttpResponse.ContainsHeader(System.String)">
            <summary>
            Определяет, содержится ли указанный HTTP-заголовок.
            </summary>
            <param name="headerName">Название HTTP-заголовка.</param>
            <returns>Значение <see langword="true"/>, если указанный HTTP-заголовок содержится, иначе значение <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="headerName"/> равно <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="headerName"/> является пустой строкой.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpResponse.ContainsHeader(Leaf.xNet.HttpHeader)">
            <summary>
            Определяет, содержится ли указанный HTTP-заголовок.
            </summary>
            <param name="header">HTTP-заголовок.</param>
            <returns>Значение <see langword="true"/>, если указанный HTTP-заголовок содержится, иначе значение <see langword="false"/>.</returns>
        </member>
        <member name="M:Leaf.xNet.HttpResponse.EnumerateHeaders">
            <summary>
            Возвращает перечисляемую коллекцию HTTP-заголовков.
            </summary>
            <returns>Коллекция HTTP-заголовков.</returns>
        </member>
        <member name="T:Leaf.xNet.HttpStatusCode">
            <summary>
            Определяет коды состояния HTTP.
            </summary>
        </member>
        <member name="T:Leaf.xNet.BytesContent">
            <inheritdoc />
            <summary>
            Представляет тело запроса в виде байтов.
            </summary>
        </member>
        <member name="F:Leaf.xNet.BytesContent.Content">
            <summary>Содержимое тела запроса.</summary>
        </member>
        <member name="F:Leaf.xNet.BytesContent.Offset">
            <summary>Смещение в байтах содержимого тела запроса.</summary>
        </member>
        <member name="F:Leaf.xNet.BytesContent.Count">
            <summary>Число отправляемых байтов содержимого.</summary>
        </member>
        <member name="M:Leaf.xNet.BytesContent.#ctor(System.Byte[])">
            <inheritdoc />
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Leaf.xNet.BytesContent" />.
            </summary>
            <param name="content">Содержимое тела запроса.</param>
            <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="content" /> равно <see langword="null" />.</exception>
            <remarks>По умолчанию используется тип контента - 'application/octet-stream'.</remarks>
        </member>
        <member name="M:Leaf.xNet.BytesContent.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Leaf.xNet.BytesContent"/>.
            </summary>
            <param name="content">Содержимое тела запроса.</param>
            <param name="offset">Смещение в байтах для контента.</param>
            <param name="count">Число байтов отправляемых из контента.</param>
            <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="content"/> равно <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Значение параметра <paramref name="offset"/> меньше 0.
            -или-
            Значение параметра <paramref name="offset"/> больше длины содержимого.
            -или-
            Значение параметра <paramref name="count"/> меньше 0.
            -или-
            Значение параметра <paramref name="count"/> больше (длина содержимого - смещение).</exception>
            <remarks>По умолчанию используется тип контента - 'application/octet-stream'.</remarks>
        </member>
        <member name="M:Leaf.xNet.BytesContent.#ctor">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Leaf.xNet.BytesContent"/>.
            </summary>
        </member>
        <member name="M:Leaf.xNet.BytesContent.CalculateContentLength">
            <inheritdoc />
            <summary>
            Подсчитывает и возвращает длину тела запроса в байтах.
            </summary>
            <returns>Длина тела запроса в байтах.</returns>
        </member>
        <member name="M:Leaf.xNet.BytesContent.WriteTo(System.IO.Stream)">
            <inheritdoc />
            <summary>
            Записывает данные тела запроса в поток.
            </summary>
            <param name="stream">Поток, куда будут записаны данные тела запроса.</param>
        </member>
        <member name="T:Leaf.xNet.FileContent">
            <inheritdoc />
            <summary>
            Представляет тело запроса в виде потока данных из определённого файла.
            </summary>
        </member>
        <member name="M:Leaf.xNet.FileContent.#ctor(System.String,System.Int32)">
            <inheritdoc />
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Leaf.xNet.FileContent" /> и открывает поток файла.
            </summary>
            <param name="pathToContent">Путь к файлу, который станет содержимым тела запроса.</param>
            <param name="bufferSize">Размер буфера в байтах для потока.</param>
            <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="pathToContent" /> равно <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="pathToContent" /> является пустой строкой.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Значение параметра <paramref name="bufferSize" /> меньше 1.</exception>
            <exception cref="T:System.IO.PathTooLongException">Указанный путь, имя файла или и то и другое превышает наибольшую возможную длину, определенную системой. Например, для платформ на основе Windows длина пути не должна превышать 248 знаков, а имена файлов не должны содержать более 260 знаков.</exception>
            <exception cref="T:System.IO.FileNotFoundException">Значение параметра <paramref name="pathToContent" /> указывает на несуществующий файл.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">Значение параметра <paramref name="pathToContent" /> указывает на недопустимый путь.</exception>
            <exception cref="T:System.IO.IOException">Ошибка ввода-вывода при работе с файлом.</exception>
            <exception cref="T:System.Security.SecurityException">Вызывающий оператор не имеет необходимого разрешения.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            Операция чтения файла не поддерживается на текущей платформе.
            -или-
            Значение параметра <paramref name="pathToContent" /> определяет каталог.
            -или-
            Вызывающий оператор не имеет необходимого разрешения.
            </exception>
            <remarks>Тип контента определяется автоматически на основе расширения файла.</remarks>
        </member>
        <member name="T:Leaf.xNet.FormUrlEncodedContent">
            <inheritdoc />
            <summary>
            Представляет тело запроса в виде параметров запроса.
            </summary>
        </member>
        <member name="M:Leaf.xNet.FormUrlEncodedContent.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Boolean,System.Boolean)">
            <inheritdoc />
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Leaf.xNet.FormUrlEncodedContent" />.
            </summary>
            <param name="content">Содержимое тела запроса в виде параметров запроса.</param>
            <param name="valuesUnescaped">Указывает, нужно ли пропустить кодирование значений параметров запроса.</param>
            <param name="keysUnescaped">Указывает, нужно ли пропустить кодирование имен параметров запроса.</param>
            <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="content" /> равно <see langword="null" />.</exception>
            <remarks>По умолчанию используется тип контента - 'application/x-www-form-urlencoded'.</remarks>
        </member>
        <member name="T:Leaf.xNet.HttpContent">
            <inheritdoc />
            <summary>
            Представляет тело запроса. Освобождается сразу после отправки.
            </summary>
        </member>
        <member name="F:Leaf.xNet.HttpContent.MimeContentType">
            <summary>MIME-тип контента.</summary>
        </member>
        <member name="P:Leaf.xNet.HttpContent.ContentType">
            <summary>
            Возвращает или задаёт MIME-тип контента.
            </summary>
        </member>
        <member name="M:Leaf.xNet.HttpContent.CalculateContentLength">
            <summary>
            Подсчитывает и возвращает длину тела запроса в байтах.
            </summary>
            <returns>Длина тела запроса в байтах.</returns>
        </member>
        <member name="M:Leaf.xNet.HttpContent.WriteTo(System.IO.Stream)">
            <summary>
            Записывает данные тела запроса в поток.
            </summary>
            <param name="stream">Поток, куда будут записаны данные тела запроса.</param>
        </member>
        <member name="M:Leaf.xNet.HttpContent.Dispose">
            <inheritdoc />
            <summary>
            Освобождает все ресурсы, используемые текущим экземпляром класса <see cref="T:Leaf.xNet.HttpContent" />.
            </summary>
        </member>
        <member name="M:Leaf.xNet.HttpContent.Dispose(System.Boolean)">
            <summary>
            Освобождает неуправляемые (а при необходимости и управляемые) ресурсы, используемые объектом <see cref="T:Leaf.xNet.HttpContent"/>.
            </summary>
            <param name="disposing">Значение <see langword="true"/> позволяет освободить управляемые и неуправляемые ресурсы; значение <see langword="false"/> позволяет освободить только неуправляемые ресурсы.</param>
        </member>
        <member name="T:Leaf.xNet.MultipartContent">
            <inheritdoc cref="T:Leaf.xNet.HttpContent" />
            <summary>
            Представляет тело запроса в виде составного содержимого.
            </summary>
        </member>
        <member name="M:Leaf.xNet.MultipartContent.#ctor">
            <inheritdoc />
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Leaf.xNet.MultipartContent" />.
            </summary>
        </member>
        <member name="M:Leaf.xNet.MultipartContent.#ctor(System.String)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Leaf.xNet.MultipartContent"/>.
            </summary>
            <param name="boundary">Граница для отделения составных частей содержимого.</param>
            <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="boundary"/> равно <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="boundary"/> является пустой строкой.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="boundary"/> имеет длину более 70 символов.</exception>
        </member>
        <member name="M:Leaf.xNet.MultipartContent.Add(Leaf.xNet.HttpContent,System.String)">
            <summary>
            Добавляет новый элемент составного содержимого тела запроса.
            </summary>
            <param name="content">Значение элемента.</param>
            <param name="name">Имя элемента.</param>
            <exception cref="T:System.ObjectDisposedException">Текущий экземпляр уже был удалён.</exception>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="content"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="name"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="name"/> является пустой строкой.</exception>
        </member>
        <member name="M:Leaf.xNet.MultipartContent.Add(Leaf.xNet.HttpContent,System.String,System.String)">
            <summary>
            Добавляет новый элемент составного содержимого тела запроса.
            </summary>
            <param name="content">Значение элемента.</param>
            <param name="name">Имя элемента.</param>
            <param name="fileName">Имя файла элемента.</param>
            <exception cref="T:System.ObjectDisposedException">Текущий экземпляр уже был удалён.</exception>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="content"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="name"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="fileName"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="name"/> является пустой строкой.</exception>
        </member>
        <member name="M:Leaf.xNet.MultipartContent.Add(Leaf.xNet.HttpContent,System.String,System.String,System.String)">
            <summary>
            Добавляет новый элемент составного содержимого тела запроса.
            </summary>
            <param name="content">Значение элемента.</param>
            <param name="name">Имя элемента.</param>
            <param name="fileName">Имя файла элемента.</param>
            <param name="contentType">MIME-тип контента.</param>
            <exception cref="T:System.ObjectDisposedException">Текущий экземпляр уже был удалён.</exception>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="content"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="name"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="fileName"/> равно <see langword="null"/>.
            -или-
            Значение параметра <paramref name="contentType"/> равно <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="name"/> является пустой строкой.</exception>
        </member>
        <member name="M:Leaf.xNet.MultipartContent.CalculateContentLength">
            <inheritdoc />
            <summary>
            Подсчитывает и возвращает длину тела запроса в байтах.
            </summary>
            <returns>Длина тела запроса в байтах.</returns>
            <exception cref="T:System.ObjectDisposedException">Текущий экземпляр уже был удалён.</exception>
        </member>
        <member name="M:Leaf.xNet.MultipartContent.WriteTo(System.IO.Stream)">
            <inheritdoc />
            <summary>
            Записывает данные тела запроса в поток.
            </summary>
            <param name="stream">Поток, куда будут записаны данные тела запроса.</param>
            <exception cref="T:System.ObjectDisposedException">Текущий экземпляр уже был удалён.</exception>
            <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="stream" /> равно <see langword="null" />.</exception>
        </member>
        <member name="M:Leaf.xNet.MultipartContent.GetEnumerator">
            <inheritdoc />
            <summary>
            Возвращает перечислитель элементов составного содержимого.
            </summary>
            <returns></returns>
            <exception cref="T:System.ObjectDisposedException">Текущий экземпляр уже был удалён.</exception>
        </member>
        <member name="M:Leaf.xNet.MultipartContent.Dispose(System.Boolean)">
            <inheritdoc />
            <summary>
            Освобождает неуправляемые (а при необходимости и управляемые) ресурсы, используемые объектом <see cref="T:Leaf.xNet.HttpContent" />.
            </summary>
            <param name="disposing">Значение <see langword="true" /> позволяет освободить управляемые и неуправляемые ресурсы; значение <see langword="false" /> позволяет освободить только неуправляемые ресурсы.</param>
        </member>
        <member name="T:Leaf.xNet.StreamContent">
            <inheritdoc />
            <summary>
            Представляет тело запроса в виде потока.
            </summary>
        </member>
        <member name="F:Leaf.xNet.StreamContent.ContentStream">
            <summary>Содержимое тела запроса.</summary>
        </member>
        <member name="F:Leaf.xNet.StreamContent.BufferSize">
            <summary>Размер буфера в байтах для потока.</summary>
        </member>
        <member name="F:Leaf.xNet.StreamContent.InitialStreamPosition">
            <summary>Позиция в байтах, с которой начинается считывание данных из потока.</summary>
        </member>
        <member name="M:Leaf.xNet.StreamContent.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Leaf.xNet.StreamContent"/>.
            </summary>
            <param name="contentStream">Содержимое тела запроса.</param>
            <param name="bufferSize">Размер буфера в байтах для потока.</param>
            <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="contentStream"/> равно <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Поток <paramref name="contentStream"/> не поддерживает чтение или перемещение позиции.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Значение параметра <paramref name="bufferSize"/> меньше 1.</exception>
            <remarks>По умолчанию используется тип контента - 'application/octet-stream'.</remarks>
        </member>
        <member name="M:Leaf.xNet.StreamContent.#ctor">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Leaf.xNet.StreamContent"/>.
            </summary>
        </member>
        <member name="M:Leaf.xNet.StreamContent.CalculateContentLength">
            <inheritdoc />
            <summary>
            Подсчитывает и возвращает длину тела запроса в байтах.
            </summary>
            <returns>Длина контента в байтах.</returns>
            <exception cref="T:System.ObjectDisposedException">Текущий экземпляр уже был удалён.</exception>
        </member>
        <member name="M:Leaf.xNet.StreamContent.WriteTo(System.IO.Stream)">
            <inheritdoc />
            <summary>
            Записывает данные тела запроса в поток.
            </summary>
            <param name="stream">Поток, куда будут записаны данные тела запроса.</param>
            <exception cref="T:System.ObjectDisposedException">Текущий экземпляр уже был удалён.</exception>
            <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="stream" /> равно <see langword="null" />.</exception>
        </member>
        <member name="M:Leaf.xNet.StreamContent.Dispose(System.Boolean)">
            <inheritdoc />
            <summary>
            Освобождает неуправляемые (а при необходимости и управляемые) ресурсы, используемые объектом <see cref="T:Leaf.xNet.HttpContent" />.
            </summary>
            <param name="disposing">Значение <see langword="true" /> позволяет освободить управляемые и неуправляемые ресурсы; значение <see langword="false" /> позволяет освободить только неуправляемые ресурсы.</param>
        </member>
        <member name="T:Leaf.xNet.StringContent">
            <inheritdoc />
            <summary>
            Представляет тело запроса в виде строки.
            </summary>
        </member>
        <member name="M:Leaf.xNet.StringContent.#ctor(System.String)">
            <inheritdoc />
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Leaf.xNet.StringContent" />.
            </summary>
            <param name="content">Содержимое контента.</param>
            <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="content" /> равно <see langword="null" />.</exception>
            <remarks>По умолчанию используется тип контента - 'text/plain'.</remarks>
        </member>
        <member name="M:Leaf.xNet.StringContent.#ctor(System.String,System.Text.Encoding)">
            <inheritdoc />
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Leaf.xNet.StringContent" />.
            </summary>
            <param name="content">Содержимое контента.</param>
            <param name="encoding">Кодировка, применяемая для преобразования данных в последовательность байтов.</param>
            <exception cref="T:System.ArgumentNullException">
            Значение параметра <paramref name="content" /> равно <see langword="null" />.
            -или-
            Значение параметра <paramref name="encoding" /> равно <see langword="null" />.
            </exception>
            <remarks>По умолчанию используется тип контента - 'text/plain'.</remarks>
        </member>
        <member name="T:Leaf.xNet.DownloadProgressChangedEventArgs">
            <inheritdoc />
            <summary>
            Представляет данные для события, сообщающим о прогрессе загрузки данных.
            </summary>
        </member>
        <member name="P:Leaf.xNet.DownloadProgressChangedEventArgs.BytesReceived">
            <summary>
            Возвращает количество полученных байтов.
            </summary>
        </member>
        <member name="P:Leaf.xNet.DownloadProgressChangedEventArgs.TotalBytesToReceive">
            <summary>
            Возвращает общее количество получаемых байтов.
            </summary>
            <value>Если общее количество получаемых байтов неизвестно, то значение -1.</value>
        </member>
        <member name="P:Leaf.xNet.DownloadProgressChangedEventArgs.ProgressPercentage">
            <summary>
            Возвращает процент полученных байтов.
            </summary>
        </member>
        <member name="M:Leaf.xNet.DownloadProgressChangedEventArgs.#ctor(System.Int64,System.Int64)">
            <inheritdoc />
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Leaf.xNet.DownloadProgressChangedEventArgs" />.
            </summary>
            <param name="bytesReceived">Количество полученных байтов.</param>
            <param name="totalBytesToReceive">Общее количество получаемых байтов.</param>
        </member>
        <member name="T:Leaf.xNet.UploadProgressChangedEventArgs">
            <inheritdoc />
            <summary>
            Представляет данные для события, сообщающим о прогрессе выгрузки данных.
            </summary>
        </member>
        <member name="P:Leaf.xNet.UploadProgressChangedEventArgs.BytesSent">
            <summary>
            Возвращает количество отправленных байтов.
            </summary>
        </member>
        <member name="P:Leaf.xNet.UploadProgressChangedEventArgs.TotalBytesToSend">
            <summary>
            Возвращает общее количество отправляемых байтов.
            </summary>
        </member>
        <member name="P:Leaf.xNet.UploadProgressChangedEventArgs.ProgressPercentage">
            <summary>
            Возвращает процент отправленных байтов.
            </summary>
        </member>
        <member name="M:Leaf.xNet.UploadProgressChangedEventArgs.#ctor(System.Int64,System.Int64)">
            <inheritdoc />
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Leaf.xNet.UploadProgressChangedEventArgs" />.
            </summary>
            <param name="bytesSent">Количество отправленных байтов.</param>
            <param name="totalBytesToSend">Общее количество отправляемых байтов.</param>
        </member>
        <member name="T:Leaf.xNet.HttpProxyClient">
            <inheritdoc />
            <summary>
            Представляет клиент для HTTP прокси-сервера.
            </summary>
        </member>
        <member name="M:Leaf.xNet.HttpProxyClient.#ctor">
            <inheritdoc />
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Leaf.xNet.HttpProxyClient" />.
            </summary>
        </member>
        <member name="M:Leaf.xNet.HttpProxyClient.#ctor(System.String,System.Int32)">
            <inheritdoc />
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Leaf.xNet.HttpProxyClient" /> заданными данными о прокси-сервере.
            </summary>
            <param name="host">Хост прокси-сервера.</param>
            <param name="port">Порт прокси-сервера.</param>
        </member>
        <member name="M:Leaf.xNet.HttpProxyClient.#ctor(System.String,System.Int32,System.String,System.String)">
            <inheritdoc />
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Leaf.xNet.HttpProxyClient" /> заданными данными о прокси-сервере.
            </summary>
            <param name="host">Хост прокси-сервера.</param>
            <param name="port">Порт прокси-сервера.</param>
            <param name="username">Имя пользователя для авторизации на прокси-сервере.</param>
            <param name="password">Пароль для авторизации на прокси-сервере.</param>
        </member>
        <member name="P:Leaf.xNet.HttpProxyClient.ProtocolVersion">
            <summary>
            Версия протокола которая должна использоваться. HTTP 2.0 не поддерживается в данный момент.
            </summary>
        </member>
        <member name="M:Leaf.xNet.HttpProxyClient.Parse(System.String)">
            <summary>
            Преобразует строку в экземпляр класса <see cref="T:Leaf.xNet.HttpProxyClient"/>.
            </summary>
            <param name="proxyAddress">Строка вида - хост:порт:имя_пользователя:пароль. Три последних параметра являются необязательными.</param>
            <returns>Экземпляр класса <see cref="T:Leaf.xNet.HttpProxyClient"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="proxyAddress"/> равно <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="proxyAddress"/> является пустой строкой.</exception>
            <exception cref="T:System.FormatException">Формат порта является неправильным.</exception>
        </member>
        <member name="M:Leaf.xNet.HttpProxyClient.TryParse(System.String,Leaf.xNet.HttpProxyClient@)">
            <summary>
            Преобразует строку в экземпляр класса <see cref="T:Leaf.xNet.HttpProxyClient"/>. Возвращает значение, указывающее, успешно ли выполнено преобразование.
            </summary>
            <param name="proxyAddress">Строка вида - хост:порт:имя_пользователя:пароль. Три последних параметра являются необязательными.</param>
            <param name="result">Если преобразование выполнено успешно, то содержит экземпляр класса <see cref="T:Leaf.xNet.HttpProxyClient"/>, иначе <see langword="null"/>.</param>
            <returns>Значение <see langword="true"/>, если параметр <paramref name="proxyAddress"/> преобразован успешно, иначе <see langword="false"/>.</returns>
        </member>
        <member name="M:Leaf.xNet.HttpProxyClient.CreateConnection(System.String,System.Int32,System.Net.Sockets.TcpClient)">
            <inheritdoc />
            <summary>
            Создаёт соединение с сервером через прокси-сервер.
            </summary>
            <param name="destinationHost">Хост сервера, с которым нужно связаться через прокси-сервер.</param>
            <param name="destinationPort">Порт сервера, с которым нужно связаться через прокси-сервер.</param>
            <param name="tcpClient">Соединение, через которое нужно работать, или значение <see langword="null" />.</param>
            <returns>Соединение с сервером через прокси-сервер.</returns>
            <exception cref="T:System.InvalidOperationException">
            Значение свойства <see cref="!:Host" /> равно <see langword="null" /> или имеет нулевую длину.
            -или-
            Значение свойства <see cref="!:Port" /> меньше 1 или больше 65535.
            -или-
            Значение свойства <see cref="!:Username" /> имеет длину более 255 символов.
            -или-
            Значение свойства <see cref="!:Password" /> имеет длину более 255 символов.
            </exception>
            <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="destinationHost" /> равно <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="destinationHost" /> является пустой строкой.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="destinationPort" /> меньше 1 или больше 65535.</exception>
            <exception cref="!:Leaf.xNet.Net.ProxyException">Ошибка при работе с прокси-сервером.</exception>
            <remarks>Если порт сервера неравен 80, то для подключения используется метод 'CONNECT'.</remarks>
        </member>
        <member name="T:Leaf.xNet.ProxyClient">
            <inheritdoc />
            <summary>
            Представляет базовую реализацию класса для работы с прокси-сервером.
            </summary>
        </member>
        <member name="F:Leaf.xNet.ProxyClient._type">
            <summary>Тип прокси-сервера.</summary>
        </member>
        <member name="F:Leaf.xNet.ProxyClient._username">
            <summary>Имя пользователя для авторизации на прокси-сервере.</summary>
        </member>
        <member name="F:Leaf.xNet.ProxyClient._password">
            <summary>Пароль для авторизации на прокси-сервере.</summary>
        </member>
        <member name="F:Leaf.xNet.ProxyClient._connectTimeout">
            <summary>Время ожидания в миллисекундах при подключении к прокси-серверу.</summary>
        </member>
        <member name="F:Leaf.xNet.ProxyClient._readWriteTimeout">
            <summary>Время ожидания в миллисекундах при записи в поток или при чтении из него.</summary>
        </member>
        <member name="P:Leaf.xNet.ProxyClient.Type">
            <summary>
            Возвращает тип прокси-сервера.
            </summary>
        </member>
        <member name="P:Leaf.xNet.ProxyClient.Host">
            <summary>
            Хост прокси-сервера.
            </summary>
            <value>Значение по умолчанию — <see langword="null"/>.</value>
        </member>
        <member name="P:Leaf.xNet.ProxyClient.Port">
            <summary>
            Порт прокси-сервера.
            </summary>
            <value>Значение по умолчанию — 1.</value>
        </member>
        <member name="P:Leaf.xNet.ProxyClient.Username">
            <summary>
            Возвращает или задаёт имя пользователя для авторизации на прокси-сервере.
            </summary>
            <value>Значение по умолчанию — <see langword="null"/>.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра имеет длину более 255 символов.</exception>
        </member>
        <member name="P:Leaf.xNet.ProxyClient.Password">
            <summary>
            Возвращает или задаёт пароль для авторизации на прокси-сервере.
            </summary>
            <value>Значение по умолчанию — <see langword="null"/>.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра имеет длину более 255 символов.</exception>
        </member>
        <member name="P:Leaf.xNet.ProxyClient.ConnectTimeout">
            <summary>
            Возвращает или задаёт время ожидания в миллисекундах при подключении к прокси-серверу.
            </summary>
            <value>Значение по умолчанию - 9 000 мс, что равняется 9 секундам.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра меньше 0.</exception>
        </member>
        <member name="P:Leaf.xNet.ProxyClient.ReadWriteTimeout">
            <summary>
            Возвращает или задает время ожидания в миллисекундах при записи в поток или при чтении из него.
            </summary>
            <value>Значение по умолчанию - 30 000 мс, что равняется 30 секундам.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра меньше 0.</exception>
        </member>
        <member name="P:Leaf.xNet.ProxyClient.AbsoluteUriInStartingLine">
            <summary>
            Возвращает или задает значение, следует ли задавать полный адрес ресурса в заголовке запроса специально для прокси.
            Если задано <see langword="true"/> (по умолчанию) - если прокси задан верно, использовать абсолютный адрес в заголовке запроса.
            Если задано <see langword="false"/> - всегда будет использован относительный адрес в заголовке запроса.
            </summary>
        </member>
        <member name="M:Leaf.xNet.ProxyClient.#ctor(Leaf.xNet.ProxyType)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Leaf.xNet.ProxyClient"/>.
            </summary>
            <param name="proxyType">Тип прокси-сервера.</param>
        </member>
        <member name="M:Leaf.xNet.ProxyClient.#ctor(Leaf.xNet.ProxyType,System.String,System.Int32)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Leaf.xNet.ProxyClient"/>.
            </summary>
            <param name="proxyType">Тип прокси-сервера.</param>
            <param name="address">Хост прокси-сервера.</param>
            <param name="port">Порт прокси-сервера.</param>
        </member>
        <member name="M:Leaf.xNet.ProxyClient.#ctor(Leaf.xNet.ProxyType,System.String,System.Int32,System.String,System.String)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Leaf.xNet.ProxyClient"/>.
            </summary>
            <param name="proxyType">Тип прокси-сервера.</param>
            <param name="address">Хост прокси-сервера.</param>
            <param name="port">Порт прокси-сервера.</param>
            <param name="username">Имя пользователя для авторизации на прокси-сервере.</param>
            <param name="password">Пароль для авторизации на прокси-сервере.</param>
        </member>
        <member name="P:Leaf.xNet.ProxyClient.DebugHttpProxy">
            <summary>
            HTTPS прокси сервер для отладки (Charles / Fiddler).
            По умолчанию используется адрес 127.0.0.1:8888.
            </summary>
        </member>
        <member name="P:Leaf.xNet.ProxyClient.DebugSocksProxy">
            <summary>
            SOCKS5 прокси сервер для отладки (Charles / Fiddler).
            По умолчанию используется адрес 127.0.0.1:8889.
            </summary>
        </member>
        <member name="F:Leaf.xNet.ProxyClient.ProxyProtocol">
            <summary>
            Служит для преобразования строковых прокси к объекту ProxyClient.
            </summary>
        </member>
        <member name="M:Leaf.xNet.ProxyClient.Parse(Leaf.xNet.ProxyType,System.String)">
            <summary>
            Преобразует строку в экземпляр класса прокси-клиента, унаследованный от <see cref="T:Leaf.xNet.ProxyClient"/>.
            </summary>
            <param name="proxyType">Тип прокси-сервера.</param>
            <param name="proxyAddress">Строка вида - хост:порт:имя_пользователя:пароль. Три последних параметра являются необязательными.</param>
            <returns>Экземпляр класса прокси-клиента, унаследованный от <see cref="T:Leaf.xNet.ProxyClient"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="proxyAddress"/> равно <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="proxyAddress"/> является пустой строкой.</exception>
            <exception cref="T:System.FormatException">Формат порта является неправильным.</exception>
            <exception cref="T:System.InvalidOperationException">Получен неподдерживаемый тип прокси-сервера.</exception>
        </member>
        <member name="M:Leaf.xNet.ProxyClient.Parse(System.String)">
            <inheritdoc cref="M:Leaf.xNet.ProxyClient.Parse(Leaf.xNet.ProxyType,System.String)"/>
            <param name="protoProxyAddress">Строка вида - протокол://хост:порт:имя_пользователя:пароль. Три последних параметра являются необязательными.</param>
            <returns>Экземпляр класса прокси-клиента, унаследованный от <see cref="T:Leaf.xNet.ProxyClient"/>.</returns>
        </member>
        <member name="M:Leaf.xNet.ProxyClient.TryParse(Leaf.xNet.ProxyType,System.String,Leaf.xNet.ProxyClient@)">
            <summary>
            Преобразует строку в экземпляр класса прокси-клиента, унаследованный от <see cref="T:Leaf.xNet.ProxyClient"/>. Возвращает значение, указывающее, успешно ли выполнено преобразование.
            </summary>
            <param name="proxyType">Тип прокси-сервера.</param>
            <param name="proxyAddress">Строка вида - хост:порт:имя_пользователя:пароль. Три последних параметра являются необязательными.</param>
            <param name="result">Если преобразование выполнено успешно, то содержит экземпляр класса прокси-клиента, унаследованный от <see cref="T:Leaf.xNet.ProxyClient"/>, иначе <see langword="null"/>.</param>
            <returns>Значение <see langword="true"/>, если параметр <paramref name="proxyAddress"/> преобразован успешно, иначе <see langword="false"/>.</returns>
        </member>
        <member name="M:Leaf.xNet.ProxyClient.TryParse(System.String,Leaf.xNet.ProxyClient@)">
            <inheritdoc cref="M:Leaf.xNet.ProxyClient.TryParse(Leaf.xNet.ProxyType,System.String,Leaf.xNet.ProxyClient@)"/>
            <param name="protoProxyAddress">Строка вида - протокол://хост:порт:имя_пользователя:пароль. Три последних параметра являются необязательными.</param>
            <param name="result">Результат - абстрактный клиент прокси</param>
            <returns>Значение <see langword="true"/>, если параметр <paramref name="protoProxyAddress"/> преобразован успешно, иначе <see langword="false"/>.</returns>
        </member>
        <member name="M:Leaf.xNet.ProxyClient.CreateConnection(System.String,System.Int32,System.Net.Sockets.TcpClient)">
            <summary>
            Создаёт соединение с сервером через прокси-сервер.
            </summary>
            <param name="destinationHost">Хост пункта назначения, с которым нужно связаться через прокси-сервер.</param>
            <param name="destinationPort">Порт пункта назначения, с которым нужно связаться через прокси-сервер.</param>
            <param name="tcpClient">Соединение, через которое нужно работать, или значение <see langword="null"/>.</param>
            <returns>Соединение с прокси-сервером.</returns>
            <exception cref="T:System.InvalidOperationException">
            Значение свойства <see cref="P:Leaf.xNet.ProxyClient.Host"/> равно <see langword="null"/> или имеет нулевую длину.
            -или-
            Значение свойства <see cref="P:Leaf.xNet.ProxyClient.Port"/> меньше 1 или больше 65535.
            -или-
            Значение свойства <see cref="P:Leaf.xNet.ProxyClient.Username"/> имеет длину более 255 символов.
            -или-
            Значение свойства <see cref="P:Leaf.xNet.ProxyClient.Password"/> имеет длину более 255 символов.
            </exception>
            <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="destinationHost"/> равно <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="destinationHost"/> является пустой строкой.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="destinationPort"/> меньше 1 или больше 65535.</exception>
            <exception cref="T:Leaf.xNet.ProxyException">Ошибка при работе с прокси-сервером.</exception>
        </member>
        <member name="M:Leaf.xNet.ProxyClient.ToString">
            <summary>
            Формирует строку вида - хост:порт, представляющую адрес прокси-сервера.
            </summary>
            <returns>Строка вида - хост:порт, представляющая адрес прокси-сервера.</returns>
        </member>
        <member name="M:Leaf.xNet.ProxyClient.ToExtendedString">
            <summary>
            Формирует строку вида - хост:порт:имя_пользователя:пароль. Последние два параметра добавляются, если они заданы.
            </summary>
            <returns>Строка вида - хост:порт:имя_пользователя:пароль.</returns>
        </member>
        <member name="M:Leaf.xNet.ProxyClient.GetHashCode">
            <summary>
            Возвращает хэш-код для этого прокси-клиента.
            </summary>
            <returns>Хэш-код в виде 32-битового целого числа со знаком.</returns>
        </member>
        <member name="M:Leaf.xNet.ProxyClient.Equals(Leaf.xNet.ProxyClient)">
            <inheritdoc/>
            <summary>
            Определяет, равны ли два прокси-клиента.
            </summary>
            <param name="proxy">Прокси-клиент для сравнения с данным экземпляром.</param>
            <returns>Значение <see langword="true"/>, если два прокси-клиента равны, иначе значение <see langword="false"/>.</returns>
        </member>
        <member name="M:Leaf.xNet.ProxyClient.Equals(System.Object)">
            <summary>
            Определяет, равны ли два прокси-клиента.
            </summary>
            <param name="obj">Прокси-клиент для сравнения с данным экземпляром.</param>
            <returns>Значение <see langword="true"/>, если два прокси-клиента равны, иначе значение <see langword="false"/>.</returns>
        </member>
        <member name="M:Leaf.xNet.ProxyClient.CreateConnectionToProxy">
            <summary>
            Создаёт соединение с прокси-сервером.
            </summary>
            <returns>Соединение с прокси-сервером.</returns>
            <exception cref="T:Leaf.xNet.ProxyException">Ошибка при работе с прокси-сервером.</exception>
        </member>
        <member name="M:Leaf.xNet.ProxyClient.CheckState">
            <summary>
            Проверяет различные параметры прокси-клиента на ошибочные значения.
            </summary>
            <exception cref="T:System.InvalidOperationException">Значение свойства <see cref="P:Leaf.xNet.ProxyClient.Host"/> равно <see langword="null"/> или имеет нулевую длину.</exception>
            <exception cref="T:System.InvalidOperationException">Значение свойства <see cref="P:Leaf.xNet.ProxyClient.Port"/> меньше 1 или больше 65535.</exception>
            <exception cref="T:System.InvalidOperationException">Значение свойства <see cref="P:Leaf.xNet.ProxyClient.Username"/> имеет длину более 255 символов.</exception>
            <exception cref="T:System.InvalidOperationException">Значение свойства <see cref="P:Leaf.xNet.ProxyClient.Password"/> имеет длину более 255 символов.</exception>
        </member>
        <member name="M:Leaf.xNet.ProxyClient.NewProxyException(System.String,System.Exception)">
            <summary>
            Создаёт объект исключения прокси.
            </summary>
            <param name="message">Сообщение об ошибке с объяснением причины исключения.</param>
            <param name="innerException">Исключение, вызвавшее текущие исключение, или значение <see langword="null"/>.</param>
            <returns>Объект исключения прокси.</returns>
        </member>
        <member name="T:Leaf.xNet.ProxyException">
            <inheritdoc />
            <summary>
            Исключение, которое выбрасывается, в случае возникновения ошибки при работе с прокси.
            </summary>
        </member>
        <member name="P:Leaf.xNet.ProxyException.ProxyClient">
            <summary>
            Возвращает прокси-клиент, в котором произошла ошибка.
            </summary>
        </member>
        <member name="M:Leaf.xNet.ProxyException.#ctor">
            <inheritdoc />
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Leaf.xNet.ProxyException" />.
            </summary>
        </member>
        <member name="M:Leaf.xNet.ProxyException.#ctor(System.String,System.Exception)">
            <inheritdoc />
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Leaf.xNet.ProxyException" /> заданным сообщением об ошибке.
            </summary>
            <param name="message">Сообщение об ошибке с объяснением причины исключения.</param>
            <param name="innerException">Исключение, вызвавшее текущие исключение, или значение <see langword="null" />.</param>
        </member>
        <member name="M:Leaf.xNet.ProxyException.#ctor(System.String,Leaf.xNet.ProxyClient,System.Exception)">
            <inheritdoc />
            <summary>
            Инициализирует новый экземпляр класса <see cref="!:Leaf.xNet.Net.ProxyException" /> заданным сообщением об ошибке и прокси-клиентом.
            </summary>
            <param name="message">Сообщение об ошибке с объяснением причины исключения.</param>
            <param name="proxyClient">Прокси-клиент, в котором произошла ошибка.</param>
            <param name="innerException">Исключение, вызвавшее текущие исключение, или значение <see langword="null" />.</param>
        </member>
        <member name="M:Leaf.xNet.ProxyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Leaf.xNet.ProxyException" /> заданными экземплярами <see cref="T:System.Runtime.Serialization.SerializationInfo" /> и <see cref="T:System.Runtime.Serialization.StreamingContext" />.
            </summary>
            <param name="serializationInfo">Экземпляр класса <see cref="T:System.Runtime.Serialization.SerializationInfo" />, который содержит сведения, требуемые для сериализации нового экземпляра класса <see cref="T:Leaf.xNet.ProxyException" />.</param>
            <param name="streamingContext">Экземпляр класса <see cref="T:System.Runtime.Serialization.StreamingContext" />, содержащий источник сериализованного потока, связанного с новым экземпляром класса <see cref="T:Leaf.xNet.ProxyException" />.</param>
        </member>
        <member name="T:Leaf.xNet.ProxyType">
            <summary>
            Тип прокси-сервера.
            </summary>
        </member>
        <member name="T:Leaf.xNet.Socks4AProxyClient">
            <inheritdoc />
            <summary>
            Представляет клиент для Socks4a прокси-сервера.
            </summary>
        </member>
        <member name="M:Leaf.xNet.Socks4AProxyClient.#ctor">
            <inheritdoc />
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Leaf.xNet.Socks4AProxyClient" />.
            </summary>
        </member>
        <member name="M:Leaf.xNet.Socks4AProxyClient.#ctor(System.String,System.Int32)">
            <inheritdoc />
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Leaf.xNet.Socks4AProxyClient" /> заданными данными о прокси-сервере.
            </summary>
            <param name="host">Хост прокси-сервера.</param>
            <param name="port">Порт прокси-сервера.</param>
        </member>
        <member name="M:Leaf.xNet.Socks4AProxyClient.#ctor(System.String,System.Int32,System.String)">
            <inheritdoc />
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Leaf.xNet.Socks4AProxyClient" /> заданными данными о прокси-сервере.
            </summary>
            <param name="host">Хост прокси-сервера.</param>
            <param name="port">Порт прокси-сервера.</param>
            <param name="username">Имя пользователя для авторизации на прокси-сервере.</param>
        </member>
        <member name="M:Leaf.xNet.Socks4AProxyClient.Parse(System.String)">
            <summary>
            Преобразует строку в экземпляр класса <see cref="T:Leaf.xNet.Socks4AProxyClient"/>.
            </summary>
            <param name="proxyAddress">Строка вида - хост:порт:имя_пользователя:пароль. Три последних параметра являются необязательными.</param>
            <returns>Экземпляр класса <see cref="T:Leaf.xNet.Socks4AProxyClient"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="proxyAddress"/> равно <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="proxyAddress"/> является пустой строкой.</exception>
            <exception cref="T:System.FormatException">Формат порта является неправильным.</exception>
        </member>
        <member name="M:Leaf.xNet.Socks4AProxyClient.TryParse(System.String,Leaf.xNet.Socks4AProxyClient@)">
            <summary>
            Преобразует строку в экземпляр класса <see cref="T:Leaf.xNet.Socks4AProxyClient"/>. Возвращает значение, указывающее, успешно ли выполнено преобразование.
            </summary>
            <param name="proxyAddress">Строка вида - хост:порт:имя_пользователя:пароль. Три последних параметра являются необязательными.</param>
            <param name="result">Если преобразование выполнено успешно, то содержит экземпляр класса <see cref="T:Leaf.xNet.Socks4AProxyClient"/>, иначе <see langword="null"/>.</param>
            <returns>Значение <see langword="true"/>, если параметр <paramref name="proxyAddress"/> преобразован успешно, иначе <see langword="false"/>.</returns>
        </member>
        <member name="T:Leaf.xNet.Socks4ProxyClient">
            <inheritdoc />
            <summary>
            Представляет клиент для Socks4 прокси-сервера.
            </summary>
        </member>
        <member name="M:Leaf.xNet.Socks4ProxyClient.#ctor">
            <inheritdoc />
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Leaf.xNet.Socks4ProxyClient" />.
            </summary>
        </member>
        <member name="M:Leaf.xNet.Socks4ProxyClient.#ctor(System.String,System.Int32)">
            <inheritdoc />
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Leaf.xNet.Socks4ProxyClient" /> заданными данными о прокси-сервере.
            </summary>
            <param name="host">Хост прокси-сервера.</param>
            <param name="port">Порт прокси-сервера.</param>
        </member>
        <member name="M:Leaf.xNet.Socks4ProxyClient.#ctor(System.String,System.Int32,System.String)">
            <inheritdoc />
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Leaf.xNet.Socks4ProxyClient" /> заданными данными о прокси-сервере.
            </summary>
            <param name="host">Хост прокси-сервера.</param>
            <param name="port">Порт прокси-сервера.</param>
            <param name="username">Имя пользователя для авторизации на прокси-сервере.</param>
        </member>
        <member name="M:Leaf.xNet.Socks4ProxyClient.Parse(System.String)">
            <summary>
            Преобразует строку в экземпляр класса <see cref="T:Leaf.xNet.Socks4ProxyClient"/>.
            </summary>
            <param name="proxyAddress">Строка вида - хост:порт:имя_пользователя:пароль. Три последних параметра являются необязательными.</param>
            <returns>Экземпляр класса <see cref="T:Leaf.xNet.Socks4ProxyClient"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="proxyAddress"/> равно <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="proxyAddress"/> является пустой строкой.</exception>
            <exception cref="T:System.FormatException">Формат порта является неправильным.</exception>
        </member>
        <member name="M:Leaf.xNet.Socks4ProxyClient.TryParse(System.String,Leaf.xNet.Socks4ProxyClient@)">
            <summary>
            Преобразует строку в экземпляр класса <see cref="T:Leaf.xNet.Socks4ProxyClient"/>. Возвращает значение, указывающее, успешно ли выполнено преобразование.
            </summary>
            <param name="proxyAddress">Строка вида - хост:порт:имя_пользователя:пароль. Три последних параметра являются необязательными.</param>
            <param name="result">Если преобразование выполнено успешно, то содержит экземпляр класса <see cref="T:Leaf.xNet.Socks4ProxyClient"/>, иначе <see langword="null"/>.</param>
            <returns>Значение <see langword="true"/>, если параметр <paramref name="proxyAddress"/> преобразован успешно, иначе <see langword="false"/>.</returns>
        </member>
        <member name="M:Leaf.xNet.Socks4ProxyClient.CreateConnection(System.String,System.Int32,System.Net.Sockets.TcpClient)">
            <inheritdoc />
            <summary>
            Создаёт соединение с сервером через прокси-сервер.
            </summary>
            <param name="destinationHost">Хост сервера, с которым нужно связаться через прокси-сервер.</param>
            <param name="destinationPort">Порт сервера, с которым нужно связаться через прокси-сервер.</param>
            <param name="tcpClient">Соединение, через которое нужно работать, или значение <see langword="null" />.</param>
            <returns>Соединение с сервером через прокси-сервер.</returns>
            <exception cref="T:System.InvalidOperationException">
            Значение свойства <see cref="!:Host" /> равно <see langword="null" /> или имеет нулевую длину.
            -или-
            Значение свойства <see cref="!:Port" /> меньше 1 или больше 65535.
            -или-
            Значение свойства <see cref="!:Username" /> имеет длину более 255 символов.
            -или-
            Значение свойства <see cref="!:Password" /> имеет длину более 255 символов.
            </exception>
            <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="destinationHost" /> равно <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="destinationHost" /> является пустой строкой.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="destinationPort" /> меньше 1 или больше 65535.</exception>
            <exception cref="!:Leaf.xNet.Net.ProxyException">Ошибка при работе с прокси-сервером.</exception>
        </member>
        <member name="T:Leaf.xNet.Socks5ProxyClient">
            <inheritdoc />
            <summary>
            Представляет клиент для Socks5 прокси-сервера.
            </summary>
        </member>
        <member name="M:Leaf.xNet.Socks5ProxyClient.#ctor">
            <inheritdoc />
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Leaf.xNet.Socks5ProxyClient" />.
            </summary>
        </member>
        <member name="M:Leaf.xNet.Socks5ProxyClient.#ctor(System.String,System.Int32)">
            <inheritdoc />
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Leaf.xNet.Socks5ProxyClient" /> заданными данными о прокси-сервере.
            </summary>
            <param name="host">Хост прокси-сервера.</param>
            <param name="port">Порт прокси-сервера.</param>
        </member>
        <member name="M:Leaf.xNet.Socks5ProxyClient.#ctor(System.String,System.Int32,System.String,System.String)">
            <inheritdoc />
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Leaf.xNet.Socks5ProxyClient" /> заданными данными о прокси-сервере.
            </summary>
            <param name="host">Хост прокси-сервера.</param>
            <param name="port">Порт прокси-сервера.</param>
            <param name="username">Имя пользователя для авторизации на прокси-сервере.</param>
            <param name="password">Пароль для авторизации на прокси-сервере.</param>
        </member>
        <member name="M:Leaf.xNet.Socks5ProxyClient.Parse(System.String)">
            <summary>
            Преобразует строку в экземпляр класса <see cref="T:Leaf.xNet.Socks5ProxyClient"/>.
            </summary>
            <param name="proxyAddress">Строка вида - хост:порт:имя_пользователя:пароль. Три последних параметра являются необязательными.</param>
            <returns>Экземпляр класса <see cref="T:Leaf.xNet.Socks5ProxyClient"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="proxyAddress"/> равно <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="proxyAddress"/> является пустой строкой.</exception>
            <exception cref="T:System.FormatException">Формат порта является неправильным.</exception>
        </member>
        <member name="M:Leaf.xNet.Socks5ProxyClient.TryParse(System.String,Leaf.xNet.Socks5ProxyClient@)">
            <summary>
            Преобразует строку в экземпляр класса <see cref="T:Leaf.xNet.Socks5ProxyClient"/>. Возвращает значение, указывающее, успешно ли выполнено преобразование.
            </summary>
            <param name="proxyAddress">Строка вида - хост:порт:имя_пользователя:пароль. Три последних параметра являются необязательными.</param>
            <param name="result">Если преобразование выполнено успешно, то содержит экземпляр класса <see cref="T:Leaf.xNet.Socks5ProxyClient"/>, иначе <see langword="null"/>.</param>
            <returns>Значение <see langword="true"/>, если параметр <paramref name="proxyAddress"/> преобразован успешно, иначе <see langword="false"/>.</returns>
        </member>
        <member name="M:Leaf.xNet.Socks5ProxyClient.CreateConnection(System.String,System.Int32,System.Net.Sockets.TcpClient)">
            <inheritdoc />
            <summary>
            Создаёт соединение с сервером через прокси-сервер.
            </summary>
            <param name="destinationHost">Хост сервера, с которым нужно связаться через прокси-сервер.</param>
            <param name="destinationPort">Порт сервера, с которым нужно связаться через прокси-сервер.</param>
            <param name="tcpClient">Соединение, через которое нужно работать, или значение <see langword="null" />.</param>
            <returns>Соединение с сервером через прокси-сервер.</returns>
            <exception cref="T:System.InvalidOperationException">
            Значение свойства <see cref="!:Host" /> равно <see langword="null" /> или имеет нулевую длину.
            -или-
            Значение свойства <see cref="!:Port" /> меньше 1 или больше 65535.
            -или-
            Значение свойства <see cref="!:Username" /> имеет длину более 255 символов.
            -или-
            Значение свойства <see cref="!:Password" /> имеет длину более 255 символов.
            </exception>
            <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="destinationHost" /> равно <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">Значение параметра <paramref name="destinationHost" /> является пустой строкой.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="destinationPort" /> меньше 1 или больше 65535.</exception>
            <exception cref="!:Leaf.xNet.Net.ProxyException">Ошибка при работе с прокси-сервером.</exception>
        </member>
    </members>
</doc>
